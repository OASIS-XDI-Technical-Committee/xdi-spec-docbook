<?xml version="1.0" encoding="UTF-8"?>
<!-- 
For use when a committee document points at the OASIS web site for publishing:
<?xml-stylesheet type="text/xsl" 
href="http://docs.oasis-open.org/templates/DocBook/spec-0.6/stylesheets/oasis-specification-html.xsl"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
         "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" 

For use when a committee document points to an embedded runtime installation:
<?xml-stylesheet type="text/xsl" 
         href="htmlruntime/spec-0.6/stylesheets/oasis-specification-html.xsl"?>
<!DOCTYPE article
 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
        "htmlruntime/spec-0.6/docbook/docbookx.dtd" 

For use when a committee document is published in a local environment only
(note the instructions for local publishing require adjusting the stylesheet
 and DocBook directories in these declarations):
<?xml-stylesheet type="text/xsl" 
href="file:///c:/oasis/spec-0.6/stylesheets/oasis-specification-html-offline.xsl"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
         "file:///c:/oasis/spec-0.6/docbook/docbookx.dtd" 
-->
<?xml-stylesheet type="text/xsl" 
href="../../htmlruntime/spec-0.6/stylesheets/oasis-specification-html.xsl"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
         "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" 
[
<!--the document properties-->
<!ENTITY name "xdi-core">
<!ENTITY pversion "0.1">
<!ENTITY version "1.0">
<!ENTITY stage "wd01">
<!ENTITY standard "Working Draft 01">
<!ENTITY this-loc "http://docs.oasis-open.org/xdi/spec-&version;">
<!ENTITY previous-loc "http://docs.oasis-open.org/xdi/spec-&pversion;">
<!ENTITY latest-loc "http://docs.oasis-open.org/xdi/spec">
<!ENTITY pubdate "25 September 2013">
<!ENTITY title "XDI Core V&version;">
]>
<article status="&standard;">

<articleinfo>
<title>&title;</title>

<productname>&name;</productname>
<productnumber>&version;-&stage;</productnumber>
<releaseinfo role="track">Standards Track Work Product</releaseinfo>

<releaseinfo role="OASIS-specification-this-authoritative">&this-loc;/&name;-&version;-&stage;.xml</releaseinfo>
<releaseinfo role="OASIS-specification-this">&this-loc;/&name;-&version;-&stage;.pdf</releaseinfo>
<releaseinfo role="OASIS-specification-this">&this-loc;/&name;-&version;-&stage;.html</releaseinfo>

<releaseinfo role="OASIS-specification-previous-authoritative">&previous-loc;/&name;-&pversion;.xml</releaseinfo>
<releaseinfo role="OASIS-specification-previous">&previous-loc;/&name;-&pversion;.pdf</releaseinfo>
<releaseinfo role="OASIS-specification-previous">&previous-loc;/&name;-&pversion;.html</releaseinfo>

<releaseinfo role="OASIS-specification-latest-authoritative">&latest-loc;/&name;.xml</releaseinfo>
<releaseinfo role="OASIS-specification-latest">&latest-loc;/&name;.pdf</releaseinfo>
<releaseinfo role="OASIS-specification-latest">&latest-loc;/&name;.html</releaseinfo>

<releaseinfo role="committee"><ulink url="http://www.oasis-open.org/committees/xdi">OASIS XDI TC</ulink></releaseinfo>

<authorgroup>
  <editor>
    <firstname>Joseph</firstname><surname>Boyle</surname>
    <affiliation><orgname>XDI.org</orgname></affiliation>
    <email>joseph@xdi.org</email>
  </editor>
  <editor>
    <firstname>Drummond</firstname><surname>Reed</surname>
    <affiliation><orgname>Respect Network</orgname></affiliation>
    <email>drummond@respectnetwork.net</email>
  </editor>
  <editor>
    <firstname>Markus</firstname><surname>Sabadello</surname>
    <affiliation><orgname>Project Danube</orgname></affiliation>
    <email>sabadello@projectdanube.org</email>
  </editor>
</authorgroup>

<pubdate>&pubdate;</pubdate>

<copyright><year>2013</year>
<holder>OASIS Open, Inc. All Rights Reserved.</holder></copyright>

<legalnotice role="additional"><title>Additional artifacts</title>
<para>This prose specification is one component of a Work Product which also includes:</para>
<itemizedlist spacing="compact">
<listitem><para>
publishing materials: <ulink url="&this-loc;/&name;-&version;-&stage;.zip">&this-loc;/&name;-&version;-&stage;.zip</ulink></para>
</listitem>
</itemizedlist>
</legalnotice>

<legalnotice role="related"><title>Related work</title>
  <para>This document is primarily based on a set of proposals that had been collected by the OASIS XDI TC on its associated wiki at <ulink url="https://wiki.oasis-open.org/xdi/">https://wiki.oasis-open.org/xdi/</ulink>.</para>
</legalnotice>

<abstract><title>Abstract</title>
  <para>This working draft specifies the abstract pattern for all XDI core together with the binding to the http/https protocol for performing XDI operations using XDI messages.</para>
</abstract>

<!--legalnotice role="status"><title>Status</title>
<para>This is a work in progress contributed to the OASIS TC administration 
and does not at this time represent the consensus of any particular OASIS Technical Committee.
There are no plans to make this a formal Committee Specification as it is merely an internal
document made available to committee members to support the publishing process.</para>
</legalnotice-->

<legalnotice role="citation"><title>Citation format</title>
<para>When referencing this specification the following citation format should be used:</para>

<bibliolist>

<bibliomixed>
  <abbrev>OASIS-XDI-Core-V1.0</abbrev>
  <title>OASIS XDI Core V1.0</title>
  <date>&pubdate;. </date>
  <releaseinfo>OASIS &standard;. </releaseinfo>
  <citetitle><ulink url="&latest-loc;/&name;.html">&latest-loc;/&name;.html</ulink>.</citetitle>
</bibliomixed>

</bibliolist>

</legalnotice>
<legalnotice role="notices"><title>Notices</title>
<para>Copyright &#169; OASIS&#174; Open 2013. All Rights Reserved. 
</para>
<para>All capitalized terms in the following text have the meanings assigned to them in the OASIS Intellectual Property Rights Policy (the "OASIS IPR Policy"). The full Policy may be found at <ulink  url="http://www.oasis-open.org/who/intellectualproperty.php">http://www.oasis-open.org/who/intellectualproperty.php</ulink>.</para>
<para>This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published, and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this section are included on all such copies and derivative works. However, this document itself may not be modified in any way, including by removing the copyright notice or references to OASIS, except as needed for the purpose of developing any document or deliverable produced by an OASIS Technical Committee (in which case the rules applicable to copyrights, as set forth in the OASIS IPR Policy, must be followed) or as required to translate it into languages other than English.</para> 
<para>The limited permissions granted above are perpetual and will not be revoked by OASIS or its successors or assigns.</para>
<para>This document and the information contained herein is provided on an "AS IS" basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.</para> 
<para>OASIS requests that any OASIS Party or any other party that believes it has patent claims that would necessarily be infringed by implementations of this OASIS Committee Specification or OASIS Standard, to notify OASIS TC Administrator and provide an indication of its willingness to grant patent licenses to such patent claims in a manner consistent with the IPR Mode of the OASIS Technical Committee that produced this specification.</para>
<para>OASIS invites any party to contact the OASIS TC Administrator if it is aware of a claim of ownership of any patent claims that would necessarily be infringed by implementations of this specification by a patent holder that is not willing to provide a license to such patent claims in a manner consistent with the IPR Mode of the OASIS Technical Committee that produced this specification. OASIS may include such claims on its website, but disclaims any obligation to do so.</para>
<para>OASIS takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on OASIS' procedures with respect to rights in any document or deliverable produced by an OASIS Technical Committee can be found on the OASIS website. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this OASIS Committee Specification or OASIS Standard, can be obtained from the OASIS TC Administrator. OASIS makes no representation that any information or list of intellectual property rights will at any time be complete, or that any claims in such list are, in fact, Essential Claims.</para>
<para>The name "OASIS" is a trademark of <ulink url="http://www.oasis-open.org">OASIS</ulink>, the owner and developer of this specification, and should be used only to refer to the organization and its official outputs. OASIS welcomes reference to, and implementation and use of, specifications, while reserving the right to enforce its marks against misleading uses. Please see <ulink url="http://www.oasis-open.org/who/trademark.php">http://www.oasis-open.org/who/trademark.php</ulink> for above guidance.</para>
</legalnotice>
</articleinfo>


<section><title>About</title><para>About</para></section>

<section id="s.introduction">
<title>Introduction</title>

  <para>This working draft specifies the XDI graph model and serializations.</para>

<para></para>

<section>
  <title>Terminology</title>
  <section>
    <title> Key words</title>
    <para>The key words <glossterm>must</glossterm>, <glossterm>must not</glossterm>, <glossterm>required</glossterm>,
      <glossterm>shall</glossterm>, <glossterm>shall not</glossterm>, <glossterm>should</glossterm>, <glossterm>should not</glossterm>,
      <glossterm>recommended</glossterm>, <glossterm>may</glossterm>, and <glossterm>optional</glossterm> are to be
      interpreted as described in <xref linkend="rfc2119"/>. Note that for reasons of style, these words are not capitalized in this
      document.</para>
  </section>
</section>

<section>
  
  <title>Normative References</title>
  <bibliolist>
    <bibliomixed id="xdi-messaging-1.0">
      <abbrev>xdi-messaging-1.0</abbrev>
      <title><ulink url="../../xdi-messaging-1.0/xdi-messaging-1.0-wd01.xml">XDI 1.0 Messaging Specification</ulink></title>
      <author><firstname>Markus</firstname><surname>Sabadello</surname></author>
      <author><firstname>Drummond</firstname><surname>Reed</surname></author>
      <releaseinfo>OASIS Committee Working Draft 01, OASIS &pubdate;</releaseinfo> 
    </bibliomixed>
    <bibliomixed id="rfc2119">
      <abbrev>RFC 2119</abbrev>
      <title>Key words for use in RFCs to Indicate Requirement Levels</title>
      <date>March 1997</date>
      <author><firstname>S. </firstname><surname>Bradner</surname></author>
      <releaseinfo>IETF (Internet Engineering Task Force) RFC 2119, </releaseinfo>
      <citetitle><ulink url="http://www.ietf.org/rfc/rfc2119.txt">http://www.ietf.org/rfc/rfc2119.txt</ulink></citetitle>
    </bibliomixed>
    <bibliomixed id="rfc2234">
      <abbrev>RFC 2234</abbrev>
      <title>Augmented BNF for Syntax Specifications: ABNF</title>
      <date>November 1997</date>
      <author><firstname>D. </firstname><surname>Crocker</surname></author>
      <author><firstname>P. </firstname><surname>Overell</surname></author>
      <releaseinfo>IETF (Internet Engineering Task Force) RFC 2234</releaseinfo>
      <citetitle><ulink url="http://www.ietf.org/rfc/rfc2234.txt">http://www.ietf.org/rfc/rfc2234.txt</ulink></citetitle>
    </bibliomixed>
    <bibliomixed id="rfc4627">
      <abbrev>RFC 4627</abbrev>
      <title>The application/json Media Type for JavaScript Object Notation (JSON)</title>
      <date>July 2006</date>
      <author><firstname>D. </firstname><surname>Crockford</surname></author>
      <releaseinfo>IETF (Internet Engineering Task Force) RFC 4627</releaseinfo>
      <citetitle><ulink url="http://www.ietf.org/rfc/rfc4627.txt">http://www.ietf.org/rfc/rfc4627.txt</ulink></citetitle>
    </bibliomixed>
    <bibliomixed id="rfc4122">
      <abbrev>RFC 4122</abbrev>
      <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
      <date>July 2005</date>
      <author><firstname>D. </firstname><surname>Crockford</surname></author>
      <releaseinfo>IETF (Internet Engineering Task Force) RFC 4122</releaseinfo>
      <citetitle><ulink url="http://www.ietf.org/rfc/rfc4122.txt">http://www.ietf.org/rfc/rfc4122.txt</ulink></citetitle>
    </bibliomixed>
    <bibliomixed id="rfc5952">
      <abbrev>RFC 5952</abbrev>
      <title>A Recommendation for IPv6 Address Text Representation</title>
      <date>August 2010</date>
      <author><firstname>D. </firstname><surname>Crockford</surname></author>
      <releaseinfo>IETF (Internet Engineering Task Force) RFC 4627</releaseinfo>
      <citetitle><ulink url="http://www.ietf.org/rfc/rfc5952.txt">http://www.ietf.org/rfc/rfc4627.txt</ulink></citetitle>
    </bibliomixed>
  </bibliolist>
</section>

<section>
  
  <title>Non-Normative References</title>
  <bibliolist>
    <bibliomixed id="json-ld">
      <abbrev>json-ld</abbrev>
      <title><ulink url="http://json-ld.org/spec/latest/json-ld">JSON-LD: A JSON-based Serialization for Linked Data</ulink></title>
      <date>04 October 2013</date>
      <author><firstname>Gregg</firstname><surname>Kellogg</surname></author>
      <author><firstname>Markus</firstname><surname>Lanthaler</surname></author>
      <author><firstname>Niklaus</firstname><surname>Lindström</surname></author>
      <author><firstname>Dave</firstname><surname>Longley</surname></author>
      <author><firstname>Manu</firstname><surname>Sporny</surname></author>
      <releaseinfo>W3C Editor's Draft 04 October 2013 </releaseinfo>
    </bibliomixed>
  </bibliolist>
</section>

</section>
  <section><title>Design Goals</title><para>This section communicates the design goals that have guided the development of XDI.</para>
    <section><title>Universal Addressability</title>
      <para>Universal Addressability</para></section>
    <section><title>Peer Authority</title>
      <para>Peer Authority</para></section>
    <section><title>Contextual Identification</title>
      <para>Contextual Identification</para></section>
    <section><title>Persistent Identification</title>
      <para>Persistent Identification</para></section>
    <section><title>Serialization Independence</title>
      <para>Serialization Independence</para></section>
    <section><title>Portability</title>
      <para>Portability</para></section>
    <section><title>Authorization and Policy Expression</title>
      <para>Authorization and Policy Expression</para></section>
    <section><title>Schema and Ontology Expression</title>
      <para>Schema and Ontology Expression</para></section>
    <section><title>Extensibility</title>
      <para>Extensibility</para></section>
  </section>
  <section><title>The XDI Graph Model</title><para>The XDI Graph Model</para>
    <section><title>Overview</title>
      <para>The XDI graph is a directed acyclic graph with nodes connected by arcs. An XDI path is a connected chain of successive arcs; it forms an address designating the node at the end of the arc chain.</para></section>
    <section><title>Nodes</title>
      <para>There are four basic node types:</para>
      <section><title>Root ( )</title>
        <para></para></section>
      <section><title>Entity</title>
        <para></para></section>
      <section><title>Attribute &lt; &gt;</title>
        <para></para></section>
      <section><title>Value &amp;</title>
        <para></para></section>
    </section>
    <section><title>Arcs</title>
      <para>Arcs in the XDI graph consist of an identifier with one or more context symbols or functions attached.</para>
      <section><title>Literal</title>
        <para>These are terminal and can only lead to a value node</para></section>
      <section><title>Contextual</title>
        <para>These express most of the XDI graph, with each arc in a path representing a specialization.</para></section>
      <section><title>Relational</title>
        <para>These specify equivalence or other relations between two nodes. When represented as statements, the two nodes are the subject and object of the statement, while the relation is the predicate.</para></section>
    </section>
  </section>
  <section><title>Node Types</title>
    <para>There are four (five?) types: value, variable, root, and subgraph.</para>
    <section><title>Literal &amp;</title>
      <para>Leaf node carrying literal data value. Syntax is &amp; (as predicate arc)</para></section>
    <section><title>Value &amp;</title>
      <para>Node identifying the value of an attribute. Syntax is &amp; (as final arc of a subject path)</para></section>
    <section><title>Root ( )</title>
      <para>An XDI graph starts at a root. An XDI path may start with zero, one, or multiple root expressions. Roots are enclosed in parentheses.</para>
      <section><title>Outer ()</title>
        <para>The outer root roots the whole graph and is expressed as ().</para></section>
      <section><title>Peer (S)</title>
        <para>Peer root Mutability depends on the XDI address inside the xref</para></section>
      <section><title>Inner (S/P)</title>
        <para>Inner root Mutability depends on the XDI address inside the xref</para></section>
      <section><title>Statement (S/P/O)</title>
        <para>Statement root Mutability depends on the XDI address inside the xref</para></section>
    </section>
    <section><title>Singleton</title><para>A single instance of a class</para>
      <section><title>Entity</title><para>Entity</para></section>
      <section><title>Attribute</title><para>Enclosing in angle brackets &lt; &gt; indicates an attribute as opposed to an entity.</para></section>
    </section>
    <section><title>Collection [ ]</title><para>Collection</para>
       <section><title>Entity</title>
         <para>An entity may contain subentities and attributes but not a value. Enclosing in brackets [ ] indicates a collection as opposed to a singleton.</para></section>
       <section><title>Attribute</title>
         <para>An attribute may only contain subattributes (and, if singular, a value)</para></section>
    </section>
    <section><title>Member # !</title>
      <para>A node identifying an instance of an entity or attribute within a collection</para>
      <section><title>Entity</title><para>Entity</para></section>
      <section><title>Attribute</title><para>Attribute</para></section>
    </section>
    <section><title>Definition +</title><para>XDI dictionary definition</para>
      <section><title>Entity</title><para>Entity</para></section>
      <section><title>Attribute</title><para>Attribute</para></section>
    </section>
    <section><title>Variable { }</title> 
      <para>This syntax can enclose any other node type. To be further defined.</para></section>
  </section>
  <section><title>Namespace Symbols</title><para>Formerly Context Symbols</para>
    <section><title>Authorities</title>
      <para>Authorities</para>
      <section><title>Personal =</title>
        <para>Natural persons</para></section>
      <section><title>Legal @</title>
        <para>Groups, organizations, or other entities in whose identities legal rights may be asserted</para></section>
      <section><title>General *</title>
        <para>Entities in whose identities legal rights may not be asserted</para></section>
    </section>
    <section><title>Classes</title><para>Classes</para>
      <section><title>Reserved $</title>
        <para>XDI grammar and keywords use "dollar words".</para></section>
      <section><title>Unreserved +</title>
        <para>XDI generic dictionary words for user use.</para></section>
    </section>
    <section><title>Instances</title><para>Instances</para>
      <section><title>Ordered #</title>
        <para>Zero-based numeric order</para></section>
      <section><title>Unordered !</title>
        <para>Unordered </para></section>
    </section>
  </section>
  <section><title>Equivalence Relations</title><para>These are indicated by relational arcs.</para>
    <section><title>Identity $is</title>
      <para>$is indicates complete equivalence.</para></section>
    <section><title>Reference $ref</title>
      <para>$ref indicates the subject is a reference pointing to the object</para></section>
    <section><title>Replacement $rep</title>
      <para>$rep indicates the subject not only stands for the object, but that the reference should be replaced with the object.</para></section>
  </section>
  <section><title>XDI Graph Grammars</title>
    <para>Grammars are given in Augmented Backus-Naur Form as defined in <xref linkend="rfc2234"/>. Slash / is alternation, parentheses are grouping, * means zero or more of following, 1* means one or more of following, brackets [] mean zero or one of following, i.e. optional.</para>
    <para>The XDI graph's grammar is independent of serialization. Each serialization is defined by adding a small grammar defining its delimiters, the productions in all capital letters.</para>
    <para>XDI values are JSON values, and the JSON grammar is included for non-normative reference.</para>

    <section><title>Statement Grammar</title>
      <para></para>
<programlisting>
statement-list          = STARTLIST statement *(STMTSEP statement) ENDLIST
statement               = STARTSTMT (contextual-statement / relational-statement / literal-statement) ENDSTMT
contextual-statement    = direct-contextual / inverse-contextual
direct-contextual       = absolute         / root-relative / context-relative / collection-relative
inverse-contextual      = absolute-inverse / root-inverse  / context-inverse  / collection-inverse
absolute                =        outer-root SUBPRED       outer-root PREDOBJ    xdi-paths
root-relative           =     relative-root SUBPRED       outer-root PREDOBJ    xdi-paths
context-relative        =          xdi-path SUBPRED       outer-root PREDOBJ    relative-contexts
collection-relative     =collection-context SUBPRED       outer-root PREDOBJ    member-contexts
absolute-inverse        =          xdi-path SUBPRED "$is" outer-root PREDOBJ    outer-root
root-inverse            =          xdi-path SUBPRED "$is" outer-root PREDOBJ    relative-root
context-inverse         =  relative-context SUBPRED "$is" outer-root PREDOBJ    xdi-paths
collection-inverse      =    member-context SUBPRED "$is" outer-root PREDOBJ    collection-contexts

relational-statement    = inverse-relational / direct-relational
direct-relational       =          xdi-path SUBPRED       xdi-path PREDOBJ    ( xdi-path / outer-root / xdi-paths)
inverse-relational      =          xdi-path SUBPRED "$is" xdi-path PREDOBJ    ( xdi-path / outer-root / xdi-paths)

literal-statement       = literal-context "&amp;" SUBPRED    "&amp;" PREDOBJ    json-value
</programlisting>
    </section>

    <section><title>Path List Grammar</title>
      <para>This is used when multiple objects per subject/predicate pair are used in multiple-line display format or in JSON serialization.</para>
      <para>Needs further work.</para>
<programlisting>
;xdi-paths              = xdi-path            ; for single-line display format only - make alternative?
xdi-paths               = DOWNLEVEL 1*(CTXTSEP xdi-path )    UPLEVEL   ; for multiple-object statements
relative-contexts       = DOWNLEVEL 1*(CTXTSEP relative-context) UPLEVEL
collection-contexts     = DOWNLEVEL 1*(CTXTSEP collection-context)    UPLEVEL
member-contexts         = DOWNLEVEL 1*(CTXTSEP member-context) UPLEVEL
</programlisting>
    </section>
    
    <section><title>Path Grammar</title>
      <para>An XDI path can contain roots, then entities, then attributes, then value, in that order. Each of those elements is optional, except that a value must be preceded by an attribute singleton or attribute member.</para>

<programlisting>
xdi-path          = *root-node *entity-node *attribute-node [ attribute-value ]
entity-node       = ( entity-singleton    / ( entity-collection     *entity-member ) )
attribute-node    = ( attribute-singleton / ( attribute-collection  *attribute-member ) ) 
attribute-value   = ( attribute-singleton / ( attribute-collection 1*attribute-member ) ) value 
</programlisting>
      <para>The following section is probably obsolete. Please confirm.</para>
<programlisting>
xdi-path       = outer-root / ( 1*relative-root [ relative-context ] ) / relative-context ; ND equivalent to *relative-root *subpath minus the empty case
relative-context   = 1*subpath
collection-context = [ 1*relative-root ] collection-path                                      ; ND *relative-root *subpath collection
collection-path    = ( subpath collection-path ) / collection
member-context     = 1*member [ relative-context ]                                            ; ND 1*member *subpath
literal-context    = [ 1*relative-root ] literal-path
literal-path       = ( subpath literal-path ) / attribute-singleton / attribute-path          ; ND *subpath ( attribute-singleton / attribute-path )
attribute-path     = attribute-collection 1*member
subpath            = singleton / ( collection [ 1*member ] ) / definition / variable
</programlisting>
    </section>

    <section><title>Unfactored Root Grammar</title>
      <para>This alternative does not factor the parentheses out of the root definition.</para>
<programlisting>
root-node               = outer-root / relative-root
outer-root              = "()"
relative-root           = peer-root / inner-root / statement-root
peer-root               = xref
inner-root              = "(" xdi-path SUBPRED xdi-path ")"
statement-root          = "(" statement ")"                                                 
xref                    = "(" ( xdi-path / presumed-iri / xdi-identifier ) ")"  
</programlisting>
    </section>

    <section><title>Factored Root Grammar</title>
      <para>This alternative factors the parentheses out of the root definition.</para>
<programlisting>
root-node               = outer-root / relative-root
outer-root              = "(" ")"
relative-root           = "(" ( peer-root / inner-root / statement-root ) ")"
peer-root               = xref
inner-root              = xdi-path SUBPRED xdi-path
statement-root          = statement                                             
xref                    = ( xdi-path / presumed-iri / xdi-identifier )  
</programlisting>
    <para>Note that since a statement is a subject / predicate / object triple, a root may contain a 3-tuple (statement), 2-tuple (inner root), or 1-tuple (path) of XDI paths; or an XDI identifier or an IRI.</para>
    </section>

    <section><title>Arc Grammar</title>
      <para>These describe an individual directed edge in the XDI graph.</para>
<programlisting>
entity-singleton        = authority-singleton / type-singleton / member-singleton
authority-singleton     = person-singleton / legal-singleton
type-singleton          = unreserved-type / reserved-type
person-singleton        = "=" SYMSEP ( xref / xdi-identifier )
legal-singleton         = "@" SYMSEP ( xref / xdi-identifier )
general-singleton       = "*" SYMSEP ( xref / xdi-scheme / xdi-identifier )
unreserved-type         = "+" SYMSEP ( xref / xdi-scheme / xdi-identifier )
reserved-type           = "$" SYMSEP xdi-identifier

attribute-singleton     = "&lt;" SYMSEP type-singleton "&gt;"   ;need to remove > for parsed format

entity-collection       = authority-collection / type-collection / member-collection
authority-collection    = person-collection    / legal-collection
person-collection       = "[=]" SYMSEP ; need to remove ] if we make it two levels
legal-collection        = "[@]" SYMSEP 
type-collection         = reserved-collection  / unreserved-collection
reserved-collection     = "[" SYMSEP   reserved-type "]"
unreserved-collection   = "[" SYMSEP unreserved-type "]"

general-collection      = ordered-collection   / unordered-collection / singleton-collection
singleton-collection    = "[*]" SYMSEP 

attribute-collection    = "[" attribute-singleton "]"

member                  = ordered-member / unordered-member
ordered-member          = "#" SYMSEP ( ( %x31-39 DIGIT ) / "0" )                         ; No leading zeros
unordered-member        = "!" SYMSEP ( xref / xdi-scheme / xdi-identifier )

definition              = authority-definition / type-definition
authority-definition    = "$(" SYMSEP ( authority-singleton / authority-path ) ")"
authority-path          = authority-collection 1*member
type-definition         = entity-definition / attribute-definition
entity-definition       = "$(" SYMSEP type-singleton ")"
attribute-definition    = "$(" SYMSEP attribute-singleton ")"

variable                = "{" [ xdi-path ] "}"                                ; ISSUE #3 - this needs a full definition
</programlisting>
    </section>
    
    <section><title>XDI Scheme Grammar</title>
      <para>These define canonical forms of certain classes of XDI identifiers.</para>
      <para>The canonical form for IPv6 identifiers follows the canonical form of <xref linkend="rfc5952"/>, except that :: compression is not used.</para>
      <para>The canonical form for UUID identifiers follows the canonical form of <xref linkend="rfc4122"/>.</para>
<programlisting>
xdi-scheme              = ":" ( xdi-scheme-ipv6 / xdi-scheme-uuid )
xdi-scheme-ipv6         = "ipv6:" 4HEX 7*( ":" 4HEX )  
xdi-scheme-uuid         = "uuid:" 8HEX "-" 4HEX "-" 4HEX "-" 4HEX "-" 12HEX
</programlisting>
    </section>

  </section>
  <section><title>Serialization Grammars</title>
      <para></para>

    <section><title>Display Format Statement Serialization Grammar</title>
      <para>XDI Display Format is a compact human-readable representation of XDI paths and statements using a minimum of delimiters, but is not in a standard data interchange format such as JSON. Each statement is on a separate line, and the subject/predicate/object of a triple are separated by the slash /.</para>
      <para>Multiline XDI Display Format allows a subject/predicate pair to by followed by multiple objects, indicated by indentation.</para>
<programlisting>
STARTLIST = ""
ENDLIST   = ""
STARTSTMT = ""
ENDSTMT   = ""
STMTSEP   = ENDLINE
SUBPRED   = "/"
PREDOBJ   = "/"
CTXTSEP   = ENDLINE %x09
SYMSEP    = ""
DOWNLEVEL = ""     ; if need cumulative indentation but impossible in ABNF, use tokens INDENT,
UPLEVEL   = ""     ; DEDENT of http://docs.python.org/2/reference/lexical_analysis.html#indentation
</programlisting>
        <para>Example:</para>
<screen>
[=]!:uuid:1111+profiles[&lt;+work&gt;]&lt;!:uuid:5555&gt;/$ref/[=]!:uuid:1111+first&lt;+name&gt;
</screen>
    </section>

    <section><title>Flat JSON Statement Serialization Grammar</title>
      <para>For XdiFlatSerialization</para>
<programlisting>
STARTLIST = "{" 
ENDLIST   = "}"
STARTSTMT = "{" QUOTE
ENDSTMT   = QUOTE "}"
STMTSEP   = QUOTE "," QUOTE
SUBPRED   = "/"
PREDOBJ   = QUOTE ":" QUOTE
CTXTSEP   = ","
SYMSEP    = ""
DOWNLEVEL = "["
UPLEVEL   = "]"
</programlisting>
        <para>Example:</para>
<screen>
{
  "[=]!:uuid:1111+profiles[&lt;+work&gt;]&lt;!:uuid:5555&gt;/$ref": [
    "[=]!:uuid:1111+first&lt;+name&gt;"
  ]
}
</screen>
    </section>

    <section><title>Parsed JSON Statement Serialization Grammar</title>
      <para>For XdiParseSerialization</para>
<programlisting>
STARTLIST = "["
ENDLIST   = "]"
STARTSTMT = "[" QUOTE
ENDSTMT   = QUOTE "]"
STMTSEP   = QUOTE "," QUOTE
SUBPRED   = QUOTE "," QUOTE
PREDOBJ   = QUOTE "," QUOTE
CTXTSEP   = ","
SYMSEP    = QUOTE "," QUOTE
DOWNLEVEL = "["
UPLEVEL   = "]"
</programlisting>
        <para>Example:</para>
<screen>
[
  [
    [
      {
        "[": "="
      },
      {
        "!": ":uuid:1111"
      },
      {
        "+": "profiles"
      },
      {
        "[": {
          "&lt;": {
            "+": "work"
          }
        }
      },
      {
        "&lt;": {
          "!": ":uuid:5555"
        }
      }
    ],
    {
      "$": "ref"
    },
    [
      {
        "[": "="
      },
      {
        "!": ":uuid:1111"
      },
      {
        "+": "first"
      },
      {
        "&lt;": {
          "+": "name"
        }
      }
    ]
  ]
]


</screen>
<sidebar><title>A Sidebar</title>
<para>
Sidebar content.
</para>
</sidebar>
    </section>

    <section><title>Graph Tree Serialization Grammar</title>
      <para>Not yet finished.</para>
<programlisting>
node            = context-node / literal-node
context-node    = "{" node *( "," node ) "}"
literal-node    = "{" QUOTE "&amp;" QUOTE ":" json-value "}"
arc             = contextual-arc / relational-arcs
contextual-arc  = QUOTE singleton QUOTE ":" context-node
relational-arcs = "{" QUOTE "/" QUOTE ":" relation *( "," relation ) "}"
relation        = "{" QUOTE pred QUOTE ":" "[" xdi-path *( "," xdi-path ) "]" "}"
</programlisting>
        <para>Example:</para>
<screen>
{
  "[=]": {
    "!:uuid:1111": {
      "+profiles": {
        "[&lt;+work&gt;]": {
          "&lt;!:uuid:5555&gt;": {
            "/": {
              "$ref": [
                "[=]!:uuid:1111+first&lt;+name&gt;"
              ]
            }
          }
        }
      },
      "+first": {}
    }
  }
}
</screen>
    </section>

    <section><title>JSON Grammar</title>
      <para>Based on <xref linkend="rfc4627"/> syntax diagrams (no actual grammar rules found there) restricted for canonical form (add reference) canonicality restrictions: no + signs, no leading zeros, no trailing zeros on fraction</para>
      <para>Get ABNF from 4427 and/or ECMA</para>
      <para>We use JSON values, i.e. a value may be a single string, number, true, false, or null, not necessarily a JSON array or object, as is required by "JSON text" in the JSON MIME type specification.</para>
      <para>XDI processors SHOULD accept non-canonical JSON values as input.</para>
      <para>XDI processors MAY output partly, fully, or not at all canonicalized versions of JSON values that clients have input, for example by removing spaces.</para>
      <para>XDI processors SHOULD fully canonicalize JSON values that are results and not user input.</para>
      <para>Canonical form includes:</para>
      <para>No unnecessary whitespace</para>
      <para>Nonzero numbers have no leading zeros or preceding + sign in either fraction or exponent</para>
      <para>An exponent is preceded by uppercase E</para>
      <para>Hex in \u character escapes should be lowercase</para>
<programlisting>
json-value       = json-object / json-array / json-string / json-number / "true" / "false" / "null"
json-object      = "{" [ json-string ":" json-value *( "," json-string ":" json-value ) ] "}"
json-array       = "[" [                 json-value *( ","                 json-value ) ] "]"
json-string      = QUOTE *( " " / "!" / %x23-5B  / %x5D-EFFFD / json-char-escape )    QUOTE
json-char-escape = "\"    ("\" / "/" / "b" / "f" / "n" / "r" / "t" / QUOTE / ( "u" 4HEX ) )
json-number      = ( "0" / [ "-" ] noleading ) [ "." notrailing ] [ "E" [ "-" ] noleading ]
noleading        = %x31-39 *DIGIT
notrailing       = *DIGIT  %x31-39
</programlisting>
    </section>

    <section><title>Identifier Grammar</title>
      <para>A simple IRI grammar is a lightweight initial parsing alternative to the full IRI grammar in <xref linkend="rfc4627"/>. An XDI processor MAY check an IRI for full compliance with all details of IRI syntax, but this may not be necessary unless the XDI processor is about to use or dereference the IRI. </para>
<programlisting>

presumed-iri        = %x61-7A *( %x61-7A / DIGIT ) ":" *iri-body        ; Quick check for something that looks like an IRI without checking body details 
iri-body            = ( "(" iri-body ")" ) / *iri-char                  ; paired "(" and ")" are allowed in body
iri-char            = xdi-identifier-char / context-symbol / other-iri-delim
context-symbol      = "!" / "*" / "=" / "@" / "+" / "$"
other-iri-delim     = "/" / "?" / "#" / "[" / "]" / "'" / ","

xdi-identifier      = *xdi-identifier-char    ; Note: Includes any JSON numbers
xdi-identifier-char = %x41-5A / %x61-7A / DIGIT / "-" / "." / "_" / %x80-EFFFD      ; ISSUE - is there a way to leave high end open?

HEX                 = DIGIT / %x61-66
DIGIT               = %x30-39
NZDIG               = %x31-39
QUOTE               = %x22
ENDLINE             = %x0D / %x0A / ( %x0D %x0A )
</programlisting>
      <para>Hex digits in ipv6, uuid are lowercase; only the exponent prefix E in JSON numbers is uppercase.</para>
      <para>Policy on unicode characters.</para>
    </section>


  </section>
  <section><title>Serialization</title>
    <para>Serialization</para>
    <section><title>Formats</title>
      <para>Formats</para></section>
    <section><title>Rules</title>
      <para>Rules</para></section>
  </section>
  <section><title>Addressing Rules</title>
    <para>Addressing Rules</para>
  </section>
  <section><title>XDI Identifier Schemes</title>
    <para>Schemes indicate certain classes of identifiers in canonical form. Schemes are signaled by a prefix between colons, preceding the identifier.</para>
    <section><title>UUID</title>
      <para>Universally Unique Identifier</para></section>
    <section><title>IPv6 number</title>
      <para>This is a single IPv6 number, in unabbreviated form.</para></section>
    <section><title>SHA-2 hash</title>
      <para>SHA-256, SHA-384, and SHA-512</para></section>
    <section><title>Extensibility</title>
      <para>Extensibility</para></section>
  </section>

<appendix id="s.acknowledgements" role="non-normative">
  <title>Acknowledgements</title>

  <para>This specification was written with the generous and appreciated assistance of</para>
</appendix>
  
<appendix id="a.dollarwords" role="non-normative">
  <title>Dollar Words</title>
  
  <para>This appendix contains formal definitions of the XDI dollar words introduced by this specification.</para>
</appendix>
  
<appendix id="a.examples" role="non-normative">
  <title>Examples</title>
  
  <para>This appendix contains XDI core examples.</para>
</appendix>

</article>
