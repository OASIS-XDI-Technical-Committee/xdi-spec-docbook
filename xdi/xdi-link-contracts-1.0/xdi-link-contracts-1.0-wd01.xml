<?xml version="1.0" encoding="UTF-8"?>
<!-- 
For use when a committee document points at the OASIS web site for publishing:
<?xml-stylesheet type="text/xsl" 
href="http://docs.oasis-open.org/templates/DocBook/spec-0.6/stylesheets/oasis-specification-html.xsl"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
         "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" 

For use when a committee document points to an embedded runtime installation:
<?xml-stylesheet type="text/xsl" 
         href="htmlruntime/spec-0.6/stylesheets/oasis-specification-html.xsl"?>
<!DOCTYPE article
 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
        "htmlruntime/spec-0.6/docbook/docbookx.dtd" 

For use when a committee document is published in a local environment only
(note the instructions for local publishing require adjusting the stylesheet
 and DocBook directories in these declarations):
<?xml-stylesheet type="text/xsl" 
href="file:///c:/oasis/spec-0.6/stylesheets/oasis-specification-html-offline.xsl"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
         "file:///c:/oasis/spec-0.6/docbook/docbookx.dtd" 
-->
<?xml-stylesheet type="text/xsl" 
         href="../../htmlruntime/spec-0.6/stylesheets/oasis-specification-html.xsl"?>
<!DOCTYPE article
 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
        "../../htmlruntime/spec-0.6/docbook/docbookx.dtd" 
[
<!--the document properties-->
<!ENTITY name "xdi-link-contracts">
<!ENTITY pversion "0.1">
<!ENTITY version "1.0">
<!ENTITY stage "wd01">
<!ENTITY standard "Working Draft 01">
<!ENTITY this-loc "http://docs.oasis-open.org/xdi/spec-&version;">
<!ENTITY previous-loc "http://docs.oasis-open.org/xdi/spec-&pversion;">
<!ENTITY latest-loc "http://docs.oasis-open.org/xdi/spec">
<!ENTITY pubdate "(not published)">
<!ENTITY title "XDI Link Contracts V&version;">
]>

<article status="&standard;">

<articleinfo>

<title>&title;</title>
<productname>&name;</productname>
<productnumber>&version;-&stage;</productnumber>
<releaseinfo role="track">Standards Track Work Product</releaseinfo>
<releaseinfo role="OASIS-specification-this-authoritative">&this-loc;/&name;-&version;-&stage;.xml</releaseinfo>
<releaseinfo role="OASIS-specification-this">&this-loc;/&name;-&version;-&stage;.pdf</releaseinfo>
<releaseinfo role="OASIS-specification-this">&this-loc;/&name;-&version;-&stage;.html</releaseinfo>
<releaseinfo role="OASIS-specification-previous-authoritative">&previous-loc;/&name;-&pversion;.xml</releaseinfo>
<releaseinfo role="OASIS-specification-previous">&previous-loc;/&name;-&pversion;.pdf</releaseinfo>
<releaseinfo role="OASIS-specification-previous">&previous-loc;/&name;-&pversion;.html</releaseinfo>
<releaseinfo role="OASIS-specification-latest-authoritative">&latest-loc;/&name;.xml</releaseinfo>
<releaseinfo role="OASIS-specification-latest">&latest-loc;/&name;.pdf</releaseinfo>
<releaseinfo role="OASIS-specification-latest">&latest-loc;/&name;.html</releaseinfo>
<releaseinfo role="committee"><ulink url="http://www.oasis-open.org/committees/xdi">OASIS XDI TC</ulink></releaseinfo>
<authorgroup>
  <editor> <firstname>Dan</firstname><surname>Blum</surname>
    <affiliation><orgname>Respect Network</orgname></affiliation>
    <email>dan.blum@respect.network</email> </editor>
  <editor> <firstname>Markus</firstname><surname>Sabadello</surname>
    <affiliation><orgname>Danube Tech</orgname></affiliation>
    <email>markus@danubetech.com</email> </editor>
  <editor> <firstname>Drummond</firstname><surname>Reed</surname>
    <affiliation><orgname>XDI.org</orgname></affiliation>
    <email>drummond.reed@xdi.org</email> </editor>
</authorgroup>
<pubdate>&pubdate;</pubdate>
<copyright><year>2015</year>
<holder>OASIS Open, Inc. All Rights Reserved.</holder></copyright>
 <legalnotice role="additional"><title>Additional artifacts</title>
 <para>This prose specification is one component of a Work Product which also includes:</para>
 <!--itemizedlist spacing="compact"> <listitem><para>
publishing materials: <ulink url="&this-loc;/&name;-&version;-&stage;.zip">&this-loc;/&name;-&version;-&stage;.zip</ulink></para>
 </listitem> </itemizedlist-->
</legalnotice>
<legalnotice role="related"><title>Related work</title>
  <para>This document is primarily based on a set of proposals that had been collected by the OASIS XDI TC on its associated wiki at <ulink url="https://wiki.oasis-open.org/xdi/">https://wiki.oasis-open.org/xdi/</ulink>.</para>
</legalnotice>

<abstract><title>Abstract</title>
  <para>This working draft is for reviewer comment only and is not yet a standards document or published at OASIS. This specification defines the standard structure and vocabulary of XDI authorization statements, including XDI link contracts and policy expressions, so they are portable across all XDI endpoints..</para>
</abstract>

<legalnotice role="citation"><title>Citation format</title>
<para>When referencing this specification the following citation format should be used:</para>
<bibliolist> <bibliomixed>
  <abbrev>OASIS-XDI-Link-Contracts-V1.0</abbrev>
  <title>OASIS XDI Link Contracts V1.0</title>
  <date>&pubdate;. </date>
  <releaseinfo>OASIS &standard;. </releaseinfo>
  <citetitle><ulink url="&latest-loc;/&name;.html">&latest-loc;/&name;.html</ulink>.</citetitle>
</bibliomixed> </bibliolist>
</legalnotice>
<legalnotice role="notices"><title>Notices</title>
<para>Copyright &#169; OASIS&#174; Open 2015. All Rights Reserved.  </para>
<para>All capitalized terms in the following text have the meanings assigned to them in the OASIS Intellectual Property Rights Policy (the "OASIS IPR Policy"). The full Policy may be found at <ulink  url="http://www.oasis-open.org/who/intellectualproperty.php">http://www.oasis-open.org/who/intellectualproperty.php</ulink>.</para>
<para>This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published, and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this section are included on all such copies and derivative works. However, this document itself may not be modified in any way, including by removing the copyright notice or references to OASIS, except as needed for the purpose of developing any document or deliverable produced by an OASIS Technical Committee (in which case the rules applicable to copyrights, as set forth in the OASIS IPR Policy, must be followed) or as required to translate it into languages other than English.</para> 
<para>The limited permissions granted above are perpetual and will not be revoked by OASIS or its successors or assigns.</para>
<para>This document and the information contained herein is provided on an "AS IS" basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.</para> 
<para>OASIS requests that any OASIS Party or any other party that believes it has patent claims that would necessarily be infringed by implementations of this OASIS Committee Specification or OASIS Standard, to notify OASIS TC Administrator and provide an indication of its willingness to grant patent licenses to such patent claims in a manner consistent with the IPR Mode of the OASIS Technical Committee that produced this specification.</para>
<para>OASIS invites any party to contact the OASIS TC Administrator if it is aware of a claim of ownership of any patent claims that would necessarily be infringed by implementations of this specification by a patent holder that is not willing to provide a license to such patent claims in a manner consistent with the IPR Mode of the OASIS Technical Committee that produced this specification. OASIS may include such claims on its website, but disclaims any obligation to do so.</para>
<para>OASIS takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on OASIS' procedures with respect to rights in any document or deliverable produced by an OASIS Technical Committee can be found on the OASIS website. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this OASIS Committee Specification or OASIS Standard, can be obtained from the OASIS TC Administrator. OASIS makes no representation that any information or list of intellectual property rights will at any time be complete, or that any claims in such list are, in fact, Essential Claims.</para>
<para>The name "OASIS" is a trademark of <ulink url="http://www.oasis-open.org">OASIS</ulink>, the owner and developer of this specification, and should be used only to refer to the organization and its official outputs. OASIS welcomes reference to, and implementation and use of, specifications, while reserving the right to enforce its marks against misleading uses. Please see <ulink url="http://www.oasis-open.org/who/trademark.php">http://www.oasis-open.org/who/trademark.php</ulink> for above guidance.</para>
</legalnotice>

</articleinfo>

<section id="s.introduction"><title>Introduction</title>

  <para>This specification defines the standard structure and vocabulary of XDI authorization statements, including XDI link contracts and policy expressions, so they are portable across all XDI endpoints.</para>
  <para>This builds on the basic XDI graph model (see <xref linkend="xdi-core-1.0"/>) and on XDI Messaging (see <xref linkend="xdi-messaging-1.0"/>).</para>

  <section><title> Key words</title>

    <para>The key words <glossterm>must</glossterm>, <glossterm>must not</glossterm>, <glossterm>required</glossterm>,
      <glossterm>shall</glossterm>, <glossterm>shall not</glossterm>, <glossterm>should</glossterm>, <glossterm>should not</glossterm>,
      <glossterm>recommended</glossterm>, <glossterm>may</glossterm>, and <glossterm>optional</glossterm> are to be
      interpreted as described in <xref linkend="rfc2119"/>. Note that for reasons of style, these words are not capitalized in this
      document.</para>

  </section>
  
  <section><title>Normative References</title>

    <bibliolist> <bibliomixed id="xdi-core-1.0">
      <abbrev>OASIS-XDI-Core-V1.0</abbrev> <date>&pubdate; </date>
      <title><ulink url="../../xdi-core-1.0/xdi-core-1.0-wd01.xml">OASIS XDI 1.0 Core Specification</ulink></title>
      <author><firstname>Joseph </firstname> <surname>Boyle</surname></author>,
      <author><firstname>Drummond </firstname> <surname>Reed</surname></author>. 
      <releaseinfo>OASIS &standard;. </releaseinfo>
      <citetitle><ulink url="&latest-loc;/xdi-core.html">&latest-loc;/xdi-core.html</ulink>.</citetitle>
    </bibliomixed> <bibliomixed id="xdi-discovery-1.0">
      <abbrev>OASIS-XDI-Messaging-V1.0</abbrev> <date>&pubdate; </date>
      <title><ulink url="../../xdi-messaging-1.0/xdi-messaging-1.0-wd01.xml">OASIS XDI 1.0 Messaging Specification</ulink></title>
      <author><firstname>Markus </firstname> <surname>Sabadello</surname></author>,
      <author><firstname>Drummond </firstname> <surname>Reed</surname></author>.
      <releaseinfo>OASIS &standard;. </releaseinfo>
      <citetitle><ulink url="&latest-loc;/xdi-messaging.html">&latest-loc;/xdi-messaging.html</ulink>.</citetitle>
    </bibliomixed> <bibliomixed id="xdi-security-mechanisms-1.0">
      <abbrev>OASIS-XDI-Security-Mechanisms-V1.0</abbrev> <date>&pubdate; </date>
      <title><ulink url="../../xdi-security-mechanisms-1.0/xdi-security-mechanisms-1.0-wd01.xml">OASIS XDI 1.0 Security Mechanisms Specification</ulink></title>
      <author><firstname>Markus </firstname> <surname>Sabadello</surname></author>,
      <author><firstname>Drummond </firstname> <surname>Reed</surname></author>.
      <releaseinfo>OASIS &standard;. </releaseinfo>
      <citetitle><ulink url="&latest-loc;/xdi-security-mechanisms.html">&latest-loc;/xdi-security-mechanisms.html</ulink>.</citetitle>
    </bibliomixed> <bibliomixed id="xdi-privacy-mechanisms-1.0">
      <abbrev>OASIS-XDI-Privacy-Mechanisms-V1.0</abbrev> <date>&pubdate; </date>
      <title><ulink url="../../xdi-privacy-mechanisms-1.0/xdi-privacy-mechanisms-1.0-wd01.xml">OASIS XDI 1.0 Privacy Mechanisms Specification</ulink></title>
      <author><firstname>Markus </firstname> <surname>Sabadello</surname></author>,
      <author><firstname>Drummond </firstname> <surname>Reed</surname></author>.
      <releaseinfo>OASIS &standard;. </releaseinfo>
      <citetitle><ulink url="&latest-loc;/xdi-privacy-mechanisms.html">&latest-loc;/xdi-privacy.html</ulink>.</citetitle>
    </bibliomixed> <bibliomixed id="rfc2119">
      <abbrev>RFC 2119</abbrev><date>March 1997</date>
      <title><ulink url="http://www.ietf.org/rfc/rfc2119.txt">Key words for use in RFCs to Indicate Requirement Levels</ulink></title>
      <author><firstname>S. </firstname> <surname>Bradner</surname></author>. 
      <releaseinfo>IETF (Internet Engineering Task Force)</releaseinfo>
    </bibliomixed> <bibliomixed id="rfc6749">
      <abbrev>RFC 6749</abbrev><date>October 2012</date>
      <title><ulink url="http://www.ietf.org/rfc/rfc6749.txt">The OAuth 2.0 Authorization Framework</ulink></title>
      <author><firstname>D. </firstname> <surname>Hardt </surname></author>, 
       <releaseinfo>IETF (Internet Engineering Task Force)</releaseinfo>
    </bibliomixed> <bibliomixed id="rfc6750">
      <abbrev>RFC 6750</abbrev><date>October 2012</date>
      <title><ulink url="http://www.ietf.org/rfc/rfc6750.txt">The OAuth 2.0 Authorization Framework: Bearer Token Usage</ulink></title>
      <author><firstname>M. </firstname> <surname>Jones</surname></author>. 
      <author><firstname>D. </firstname> <surname>Hardt</surname></author>, 
      <releaseinfo>IETF (Internet Engineering Task Force)</releaseinfo>
    </bibliomixed>
  </bibliolist>

</section>

<section><title>Non-Normative References</title>

  <bibliolist>
  </bibliolist>

</section>

</section>

<section><title>XDI Link Contracts</title>

<para>To meet the security and privacy requirements of XDI-based systems acting for different authorities,
the XDI protocol enables systems to precisely describe access and usage rights to the data they control.
In order for these rights to be enforced uniformly by the all XDI authorities to which they are granted,
XDI authorization is described in XDI itself. This includes the ability to express any policy governing
authorization and for policies to reference data, variables, relations, and other statements in the
relevant XDI graphs. XDI’s primary policy building blocks are a protocol for message operations, a policy
expression syntax (using Boolean constructs) and the link contract. The link contract is an access control
mechanism designed to work equally well in either a centralized, or distributed (peer to peer) model.</para>

</section>

<section><title>Terminology</title>

<para><firstterm>XDI policy: </firstterm>The rules and practices by which XDI authorities protect information graphs from unauthorized access operations, or unauthorized usage. </para>
<para><firstterm>Authorizing authority (AA): </firstterm>The entity or organization controlling an XDI graph to which it may authorize access.</para>
<para><firstterm>Requesting authority (RA): </firstterm>An entity or organization requesting access to an AA’s graph.</para>
<para><firstterm>Operational policies: </firstterm>Control access to the graph. They can be specified in XDI link contracts or XDI messages and optionally make use of conditional policy expressions.</para>
<para><firstterm>Usage policies: </firstterm>Specify RA’s permissions to use data from the AA’s graph once the data is accessed. In many cases the obligation to honor a usage policy must be specified in a legal (or other) agreement for it to be effective. </para>
<para><firstterm>Conditional policy expressions: </firstterm>Boolean reserved words and patterns for use in XDI policies. </para>
<para><firstterm>Other policy variables: </firstterm>Time and other variables may be used in policy expressions.</para>
<para><firstterm>XDI message: </firstterm>An XDI subgraph exchanged between XDI authorities to accomplish an XDI operation ($get, $set, $del)
against information in a target graph.</para>
<para><firstterm>Link contract: </firstterm>An XDI subgraph used for access control, or authorization between an AA and an RA. It is a machine-readable agreement describing data shared and permissions granted by one XDI authority to another. A link contract describes both the policy that must be satisfied by an XDI message to be accepted and the permissions granted to the RA if those conditions are met. Link contracts may be used to apply and enforce any type of policy over shared data and messages, including security, privacy, re-sharing, synchronization, and termination.</para>

</section>

<section><title>Link Contract Model</title>

<para>By default, no one has access to data in an XDI graph unless access is granted through a link contract.
An XDI authority SHOULD create a root link contract to express its access rights to its whole graph. If parts
of the graph are to be shared publicly with external services, the controlling authority SHOULD create a
public link contract allowing anonymous access to them. If parts of the graph are to be shared with other
authorities, the controlling authority can create generic or specific link contract instances for them
through link contract instantiation exchanges.</para>

<para>Thus, link contracts may be set at various contexts of a graph. In general, a link contract specifically
addresses the subject nodes. However, the public link contract and root link contract address an entire graph.</para>

<para>All access to the graph other than by its controlling authority’s software occurs via XDI messages. XDI
messages may be submitted to the graph for policy evaluation through local APIs or over a network interface.</para>

<para>An XDI graph may be controlled by one authority yet contain sub-graphs that are controlled by other
authorities. These sub-graphs are expressed as inner roots to mark them clearly as originating from another
authority. When the two authorities choose to cooperate, the authority containing the subgraph should respect
the originating authority’s link contracts.</para>

</section>

<section><title>Link Contracts</title>

<para>Per the XDI policy model, all access to graphs is controlled through link contracts. Some
of these are general link contracts – such as the root link contract and the public link
contract – to set default policies over a broad graph context. Other link contracts enable
relationships with specific external authorities (such as an individual person) or generic types
of authorities (such as "all customers" or "all friends").</para>

<para>Link contracts reflecting relationships among authorities are created through a link
contract (LC) instantiation process. The LC instantiation process makes use of link contract
templates, requester link contracts and link contract instances, and is described in the XDI
connections specification.</para>

<section><title>Link Contract Initiation Participants</title>

<para>The parties to the instantiation of a link contract are:</para>

<orderedlist>
<listitem><para><glossterm>Authorizing Authority (AA): </glossterm>the XDI authority authorizing a link contract granting permissions to an XDI graph.</para></listitem>
<listitem><para><glossterm>Requesting Authority (RA): </glossterm>the XDI authority requesting a link contract to obtain permissions to an XDI graph.</para></listitem>
<listitem><para><glossterm>XDI Community Authority (XCA): </glossterm>the XDI authority for a community link contract.</para></listitem>
<listitem><para><glossterm>Template authority (TA): </glossterm>the XDI authority publishing a link contract template, which may or may not be the requesting authority or authorizing authority.</para></listitem>
</orderedlist>

</section>

<section><title>Link Contract Pattern Types</title>

<para>There are four core link contract patterns used for different stages of defining an XDI
authorization relationship.</para>

<orderedlist>
<listitem><para>A <glossterm>link contract template</glossterm> is a link contract containing XDI variables that must be replaced by the authorizing authority in order to create a valid link contract instance. A link contract template may be published by any XDI authority, not just a requesting or authorizing authority. Templates provided by neutral third parties make it much easier for link contracts to be standardized, promoting interoperability of XDI vocabulary and permissions. Note: Separating the RA and TA function has not been specified in detailed examples in this working draft or tested in implementation by TC members.</para></listitem>
<listitem><para>A <glossterm>link contract instance</glossterm> is produced by replacing the variables in a link contract template.</para></listitem>
<listitem><para>A <glossterm>community link contract</glossterm> is an AA link contract used to authorize a link contract instantiation request ({$do} message) from an RA. A community contract does for an AA what a requestor contract does for an RA. A community contract allows the members of a community (of any size) to establish a common policy or set of policies that will govern members of the community accepting new link contracts from each other. A simple community contract can prevent link contract requests from being used as a form of spam. The policy for this could be as simple as requiring a link contract request to come from another member of that community. A community link contract address is not derived algorithmically from a link contract template address. Rather, it is simply a well-known XDI address to all members of that community.</para></listitem>
<listitem><para>A <glossterm>requester link contract</glossterm> is a special link contract used by a requesting authority to govern acceptance of link contract instances conforming to a specific link contract template. The requester link contract expresses the policies enforced by a specific requesting authority for accepting LC instances in its own graph. The address of a requester link contract is algorithmically derived from the address of the link contract template on which it is based, providing a standard way to authorize acceptance of link contract instances based on a known template. The requester link contract also provides a way for the AA to update an LC instance repeatedly as needed, or to delete the instance in the RA’s graph.</para></listitem>
</orderedlist>

</section>

<section><title>Link Contract Pattern Definition</title>

<para>The following is a high-level summary of the three link contract pattern types.</para>

<section><title>Singleton Patterns</title>

<para>Community Contract Pattern:</para>

<programlisting>(&lt;--AA-->/&lt;--XCA-->)(&lt;--XCA-->#&lt;--C-ID-->$do
</programlisting>

or

<programlisting>(&lt;--AA-->/&lt;--XCA-->)(&lt;--XCA-->#&lt;--C-ID-->$do$if/&lt;--policy-expression-->
</programlisting>

<para>Template Pattern:</para>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}/&lt;--operation-->/{$to}&lt;--object-graph-->
</programlisting>

<para>Requester Pattern:</para>

<programlisting>(&lt;--RA-->/&lt;--TA-->&lt;--ID-->{$do})$do/$set{$do}/({$to}/&lt;--RA-->)&lt;--TA-->&lt;--ID-->$do
</programlisting>

<para>Specific Instance:</para>

<programlisting>(&lt;--AA-->/&lt;--RA-->)&lt;--TA-->&lt;--ID-->$do/&lt;--operation-->/&lt;--AA-->&lt;--object-graph-->
</programlisting>

<para>Generic Instance:</para>

<programlisting>(&lt;--AA-->/&lt;--class-->)&lt;--TA-->&lt;--ID-->$do/&lt;--operation-->/&lt;--AA-->/&lt;--class-->&lt;--AA-->&lt;--object-graph-->
</programlisting>

</section>

<section><title>Collection Patterns</title>

<para>Template Pattern:</para>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}!&lt;--member-id-->&lt;--operation-->/{$to}&lt;--object-graph-->
</programlisting>

<para>Requester Pattern:</para>

<programlisting>TBD
</programlisting>

<para>Specific Instance:</para>

<programlisting>(&lt;--AA-->/&lt;--RA-->)&lt;--TA-->&lt;--ID-->[$do]!&lt;--member-id-->/&lt;--operation-->/&lt;--AA-->&lt;--object-graph-->
</programlisting>

<para>Generic Instance:</para>

<programlisting>(&lt;--AA-->/&lt;--class-->)&lt;--TA-->&lt;--ID-->[$do]!&lt;--member-id-->/&lt;--operation-->/(&lt;--AA-->/&lt;--class-->)&lt;--AA-->&lt;--object-graph-->
</programlisting>

<para>Where:</para>

<itemizedlist>
<listitem><para><code>&lt;--TA--></code> is the XDI address of the template authority.</para></listitem>
<listitem><para><code>&lt;--RA--></code> is the XDI address of the requesting authority.</para></listitem>
<listitem><para><code>&lt;--AA--></code> is the XDI address of the authorizing authority.</para></listitem>
<listitem><para><code>&lt;--ID--></code> is an OPTIONAL context for specialization of the singleton <code>$do</code> or collection <code>[$do]&lt;--member-id--></code>. It can serve as a "qualifier" or "tag" that describes the intention of the link contract, e.g. <code>#registration</code>.</para></listitem>
<listitem><para><code>&lt;--member-id--></code> is a unique immutable ID for a member of a link contract collection. (Unordered members start with <code>!</code>, ordered members start with <code>@</code>.)</para></listitem>
<listitem><para><code>&lt;--operation--></code> is an XDI operation permitted by this link contract (e.g., <code>$get</code>, <code>$set</code>, <code>$del</code>, <code>$copy</code>, <code>$move</code>, or <code>$do&lt;--extension--></code>).</para></listitem>
<listitem><para><code>&lt;--object-graph--></code> is the XDI graph that is the object of the operations permitted by the link contract.</para></listitem>
<listitem><para><code>&lt;--boolean-context--></code> is defined in the Policy Expression Requirements.</para></listitem>
<listitem><para><code>&lt;--operator--></code> is defined in the Policy Expression Requirements.</para></listitem>
<listitem><para><code>&lt;--condition--></code> is defined in the Policy Expression Requirements.</para></listitem>
</itemizedlist>

<para>Notes about this overall architecture:</para>

<itemizedlist>
<listitem><para>The only difference between the singleton and collection patterns is whether the link contract node itself is an XDI entity singleton or entity collection.</para></listitem>
<listitem><para>Both the instance and the requester patterns begin with an inner root so that they can have an algorithmically-generated address relative to an AA and RR that is always identical in both authorities’ graphs. `The template and the requester contain an XDI <code>{$to}</code> variable to refer to AA variables outside of the policy expression branch. The instance pattern does not include XDI variables because they have been instantiated in order to create the instance.</para></listitem>
<listitem><para>In the instance pattern, each of the three components specializes the associated <code>$word</code> that follows it, i.e.:</para>
<itemizedlist>
<listitem><para><code>&lt;--authorizing-authority--></code> specializes <code>$to</code>.</para></listitem>
<listitem><para><code>&lt;--requesting-authority--></code> specializes <code>$from</code>.</para></listitem>
<listitem><para><code>&lt;--template-authority-->&lt;--template-id--></code> specializes <code>$do</code>.</para></listitem>
</itemizedlist>
</listitem>
</itemizedlist>

</section>

</section>

</section>

<section><title>Link Contract Instance Pattern</title>

<para>All link contract instances except a root link contract or public link contract
(see below) MUST consist of a set of XDI statements in one of the two following basic
patterns, which grant the operational permissions requested in a link contract template:</para>

<section><title>Link Contract Instance Singleton Pattern</title>

<programlisting>(&lt;--AA-->/&lt;--RA-->)&lt;--TA-->&lt;--ID-->$do/&lt;--operation-->/&lt;--AA-->&lt;--object-graph--> 
</programlisting>

</section>

<section><title>Link Contract Instance Collection Pattern</title>

<programlisting>(&lt;--AA-->/&lt;--RA-->)&lt;--TA-->&lt;--ID-->[$do]!&lt;--member-id-->/&lt;--operation-->/&lt;--AA-->&lt;--object-graph-->
</programlisting>

<para>Note that in link contract instances, all XDI variables have been replaced. Unless
otherwise noted, all subsequence template examples can be expressed as singleton <code>($do$if)</code>
or as collection (<code>[$do]&lt;--member-id--></code>) statements; the singleton form is shown.</para>

</section>

<section><title>Stating Policy Expressions</title>

<para>A link contract instance MAY contain one or more policy expression branches. They
express the policies that an AA will apply to allow or deny XDI messages that claim to
be authorized under the link contract. </para>

<programlisting>(&lt;--AA-->/&lt;--RA-->)$do$if/&lt;--policy expression-->
</programlisting>

<para>For example, these policy statements might require the entity using the link contract
instance on behalf of its requesting authority to:</para>

<itemizedlist>
<listitem><para>Be an employee of a company.</para></listitem>
<listitem><para>Be under or over a certain age.</para></listitem>
<listitem><para>Have a certain reputation or trust level.</para></listitem>
</itemizedlist>

</section>

<section><title>Granting Usage Permissions</title>

<para>Link contract instances MUST grant required usage permissions (otherwise
no LC instance would be created).</para>

<programlisting>(&lt;--AA-->/&lt;--RA-->)$do$for&lt;$opt>/&amp;/&amp;/true   
</programlisting>

</section>

<section><title>Other Parameters</title>

<para>Link contracts meant to serve official or business purposes that may have compliance
or other legal significance SHOULD be time stamped, versioned and signed and contain a copy
of the generating LC template for audit purposes.</para>

<para>Note: <code>$v</code> (version) could be used as well if a link contract instance was
changed (which is allowed as long as it is not violating the template). </para>

</section>

</section>

<section><title>Link Contract Template Pattern</title>

<para>All link contract templates MUST consist of a set of XDI statements in one of the two
following patterns, both of which use the {$to} variable to represent the AA who will authorize
an LC instance. This is the same variable used to represent the receiver of an XDI message in
XDI messaging. </para>

<section><title>Link Contract Template Basic Singleton Pattern</title>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}/&lt;--operation-->/{$to}&lt;--object-graph-->
</programlisting>

</section>

<section><title>Link Contract Template Basic Collection Pattern</title>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}!&lt;--member-id-->/&lt;--operation-->/{$to}&lt;--object-graph-->
</programlisting>

<para>Unless otherwise noted, all subsequence template examples can be expressed as
singleton (<code>$do$if</code>) or as collection (<code>[$do]&lt;--member-id--></code>) statements; the
singleton form is shown.</para>

</section>

<section><title>Stating Policy Expressions</title>

<para>A link contract template MAY contain one or more policy expression branches. They
express the policies requested that an AA apply to allow or deny XDI messages that claim
to be authorized under the link contract.</para>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}$if/&lt;--policy expression-->
</programlisting>

</section>

<section><title>Requesting Operational Permissions</title>

<para>Each relational <code>&lt;--operation--></code> predicate in the <code>$do</code> or
<code>[$do]&lt;--member-id--></code> context MUST define a permission granted by the link
contract to an XDI message that satisfies the link contract policies.</para>

<para>The <code>&lt;--object-graph--></code> of each <code>&lt;--operation--></code> predicate
defines the XDI graph or subgraph over which the permission for the specified operation is
granted. A template can indicate whether a requested permission is mandatory or optional
using the reserved word <code>$required</code>.</para>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}/&lt;--operation-->/{$to}&lt;--object-graph-->&lt;$required>&amp;/&amp;/true  ##mandatory
&lt;--TA-->&lt;--ID-->{$do}/&lt;--operation-->/{$to}&lt;--object-graph-->&lt;$required>&amp;/&amp;/false  ## optional
</programlisting>

</section>

<section><title>Requesting Usage Permissions</title>

<para>An operational permission leaving usage permissions unspecified is, in effect, requesting
blanket permissions. RAs SHOULD request more specific usage permissions for the data in an
<code>&lt;--object-graph--></code> using the <code>$for</code> reserved word and the <code>$opt</code> reserved word in their link
contract template. Additionally, RA’s SHOULD use the <code>$required</code> and <code>$default</code> reserved words
for an opt-in patterns.</para>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}$for{&lt;$opt>}&lt;$required>&amp;/&amp;/true     ## opt in is required
&lt;--TA-->&lt;--ID-->{$do}$for{&lt;$opt>}&lt;$default>&amp;/&amp;/false     
&lt;--TA-->&lt;--ID-->{$do}$for{&lt;$opt>}&lt;--language-->/&amp;/&amp;/"human readable explanation"
</programlisting>

</section>

<section><title>Other Permissions</title>

<para>Templates for link contracts meant to serve official or business purposes that may
have compliance or other legal significance SHOULD be labeled, time stamped, signed and/or
version-numbered.</para>

<programlisting>&lt;--TA-->&lt;--ID-->{$do}&lt;--language-context-->/&amp;/&amp;/"human readable label"
&lt;--TA-->&lt;--ID-->{$do}&lt;$template>&lt;$add>{&lt;$t>}/&amp;/&amp;/&lt;--UTC time-->
&lt;--TA-->&lt;--ID-->{$do}&lt;-- signature-context --></programlisting>

<para>TBD: version</para>

</section>

</section>

<section><title>Link Contract Policies</title>

<para><firstterm>XDI operational policies</firstterm> are expressed in XDI link contracts or XDI messages and may be evaluated
against an evaluation context. The result is always a boolean value (true or false).  Two elements are
needed to set the evaluation context:</para>

<orderedlist>
<listitem><para>The XDI graph that is the target of an XDI message (called the <glossterm>target graph</glossterm>).</para></listitem>
<listitem><para>The XDI message that is meant to be executed against the target graph (called the <glossterm>input message</glossterm>).</para></listitem>
</orderedlist>

<para>An XDI link contract policy is part of the target graph. It provides a way for an XDI endpoint to
determine if the input message is authorized. An XDI message policy is part of the input message. It
provides a way for an XDI client to request execution of the input message only if certain conditions
are met. XDI link contract policies and XDI message policies are evaluated by the XDI endpoint that hosts
the target graph and receives the input message.</para>

<para>An <glossterm>XDI data usage policy</glossterm> controls usage of the requested data outside the scope
of XDI enforcement. Data usage policies are attached to a link contract controlling access to part of the
target graph. XDI data usage policies are evaluated by the authority that holds the data to which the XDI
data usage policy applies. This may be the XDI endpoint that hosts the target graph, or it may be any other
XDI endpoint or XDI client which has retrieved the data (and the XDI data usage policy along with it).</para>

<para>Note: More work on data usage policies may come in the future, including the possibility of attaching
them to the data itself rather than the link contract. Usage policies are supported in this working draft
primarily as a basic privacy mechanism to prevent undesired copying of data when RAs and AAs are part of a
trust framework supporting these policies.</para>

<para>Policy expressions MUST follow the patterns and include applicable reserved words as specified below.</para>

<section><title>Policy Expression Pattern</title>

<para>A policy MUST consist of one or more XDI statements in the following pattern: </para>

<programlisting>&lt;--policy-context--> $if&lt;--boolean-context-->/&lt;--operator-->/&lt;--condition-->
</programlisting>

<para>Where:</para>

<orderedlist>
<listitem><para><code>&lt;--policy-context--></code> is the context of the policy expression, e.g. an XDI link contract or an XDI message.</para></listitem>
<listitem><para><code>&lt;--boolean-context--></code> is an optional hierarchy of subcontexts expressing the XDI boolean operators (<code>$and</code>, <code>$or</code>, <code>$not</code>) needed to produce a boolean logic tree for policy evaluation (see below).</para></listitem>
<listitem><para><code>&lt;--operator--></code> is either a boolean operator (<code>$true</code>, <code>$false</code>), or an XDI operation being requested by a message (e.g., <code>$get</code>, <code>$set</code>, <code>$del</code>, <code>$do&lt;--extension--></code>).</para></listitem>
<listitem><para><code>&lt;--condition--></code> is either a comparison condition (<code>$is</code>, <code>$equals</code>, <code>$matches</code>, <code>$greater</code>, <code>$lesser</code>), or an arbitrary XDI statement.</para></listitem>
</orderedlist>

</section>

<section><title>Conditional Operations Policy Expression Dictionary Requirements</title>

<para>The following reserved words are proposed for operations policy expression.</para>

<section><title><code>$if</code> Policy Context</title>

<itemizedlist>
<listitem><para><code>$if</code> defines the root context node of a policy expression subgraph.</para></listitem>
<listitem><para><code>$if</code> MUST be a child context of a $do context (the root context of an XDI link contract or the operation context of an XDI message).</para></listitem>
<listitem><para><code>$if</code> MUST be an entity singleton.</para></listitem>
<listitem><para><code>$if</code> MAY have zero or more boolean subcontexts.</para></listitem>
<listitem><para><code>$if</code> MAY have zero or more operator predicates.</para></listitem>
<listitem><para><code>$if</code> evaluates to true, if</para></listitem>
<listitem><para>ANY of its boolean subcontexts evaluate to true, OR</para></listitem>
<listitem><para>ANY of its operator predicates evaluate to true.</para></listitem>
<listitem><para><code>$if</code> evaluates to false, if it has neither boolean subcontexts nor operator predicates.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$and</code> Boolean Context</title>

<itemizedlist>
<listitem><para><code>$and</code> is the boolean context expressing logical conjunction.</para></listitem>
<listitem><para><code>$and</code> MAY be an entity singleton for a single logical conjunction.</para></listitem>
<listitem><para><code>$and</code> MUST be an entity collection if there are multiple logical conjunctions that must be evaluated independently.</para></listitem>
<listitem><para><code>$and</code> MAY have zero or more boolean subcontexts.</para></listitem>
<listitem><para><code>$and</code> MAY have zero or more operator predicates.</para></listitem>
<listitem><para><code>$and</code> evaluates to true, if</para></listitem>
<listitem><para>ALL of its boolean subcontexts evaluate to true, AND</para></listitem>
<listitem><para>ALL of its operator predicates evaluate to true</para></listitem>
<listitem><para><code>$and</code> evaluates to true, if it has neither boolean subcontexts nor operator predicates.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$or</code> Boolean Context</title>

<itemizedlist>
<listitem><para><code>$or</code> is the boolean context defining logical disjunction.</para></listitem>
<listitem><para><code>$or</code> MAY be an entity singleton for a single logical disjunction.</para></listitem>
<listitem><para><code>$or</code> MUST be an entity collection if there are multiple logical disjunctions that must be evaluated independently.</para></listitem>
<listitem><para><code>$or</code> MAY have zero or more boolean subcontexts.</para></listitem>
<listitem><para><code>$or</code> MAY have zero or more operator predicates.</para></listitem>
<listitem><para><code>$or</code> evaluates to true, if</para></listitem>
<listitem><para>ANY of its boolean subcontexts evaluate to true, OR</para></listitem>
<listitem><para>ANY of its operator predicates evaluate to true.</para></listitem>
<listitem><para><code>$or</code> evaluates to false, if it has neither boolean subcontexts nor operator predicates.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$not</code> Boolean Context</title>

<itemizedlist>
<listitem><para><code>$not</code> is the boolean context defining logical negation.</para></listitem>
<listitem><para><code>$not</code> MAY be an entity singleton for a single logical negation.</para></listitem>
<listitem><para><code>$not</code> MUST be an entity collection if there are multiple logical negations that must be evaluated independently.</para></listitem>
<listitem><para><code>$not</code> MUST either have exactly one boolean subcontext, OR have exactly one operator predicate.</para></listitem>
<listitem><para><code>$not</code> evaluates to true, if</para></listitem>
<listitem><para>its single boolean subcontext evaluates to false, OR</para></listitem>
<listitem><para>its single operator predicate evaluates to false.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$true</code> Operator</title>

<itemizedlist>
<listitem><para><code>$true</code> is the boolean operator expressing that a condition statement MUST be true.</para></listitem>
<listitem><para><code>$true</code> evaluates to true, if</para></listitem>
<listitem><para>its condition evaluates to true.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$false</code> Operator</title>

<itemizedlist>
<listitem><para><code>$false</code> is the boolean operator expressing that a condition statement MUST be false.</para></listitem>
<listitem><para><code>$false</code> evaluates to true, if</para></listitem>
<listitem><para>its condition evaluates to false.</para></listitem>
</itemizedlist>

</section>

<section><title>Generic Operator</title>

<itemizedlist>
<listitem><para>If an operator is used that does not correspond to any of boolean operators (<code>$true</code>, <code>$false</code>), it is considered to be an XDI operation (e.g., <code>$get</code>, <code>$set</code>, <code>$del</code>, <code>$do&lt;--extension--></code>).</para></listitem>
<listitem><para>The XDI operation evaluates to true, if</para></listitem>
<listitem><para>it exists in the input message.</para></listitem>
</itemizedlist>

</section>

<section><title><code>{$from}</code> Variable</title>

<itemizedlist>
<listitem><para><code>{$from}</code> is a global XDI variable representing the sender of the input message (see <code>&lt;--from--></code> in the XdiMessagePatterns proposal).</para></listitem>
<listitem><para><code>{$from}</code> MUST be replaced by the XDI address of the sender of the input message before the condition is evaluated.</para></listitem>
</itemizedlist>

</section>

<section><title><code>{$msg}</code> Variable</title>

<itemizedlist>
<listitem><para><code>{$msg}</code> is a global XDI variable representing the global context of the input message (see <code>&lt;--from-->[$msg]!&lt;--id--></code> in the XdiMessagePatterns proposal).</para></listitem>
<listitem><para><code>{$msg}</code> MUST be replaced by the XDI address of the input message before the condition is evaluated.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$is</code> Condition</title>

<itemizedlist>
<listitem><para><code>$is</code> expresses that the subject and object nodes of the condition represent the same logical entity (see the EquivalenceLinks proposal).</para></listitem>
<listitem><para><code>$is</code> evaluates to true, if</para></listitem>
<listitem><para>the subject node and object node of the condition represent the same logical entity.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$equals</code> Condition</title>

<itemizedlist>
<listitem><para><code>$equals</code> expresses that the subject and object nodes of the condition have the same literal values.</para></listitem>
<listitem><para><code>$equals</code> evaluates to true, if</para></listitem>
<listitem><para>both the subject node and object node of the condition identify an XDI literal, AND</para></listitem>
<listitem><para>the literal values are equivalent.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$matches</code> Condition</title>

<itemizedlist>
<listitem><para><code>$matches</code> expresses that the literal value of the subject node of the condition matches the regular expression specified in the literal value of the object node of the condition. [TODO: define which regular expression syntax to use]</para></listitem>
<listitem><para><code>$matches</code> evaluates to true, if</para></listitem>
<listitem><para>both the subject node and object node of the condition identify an XDI literal, AND</para></listitem>
<listitem><para>the literal value of the subject node of the condition matches the regular expression specified in the literal value of the object node of the condition.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$greater</code> Condition</title>

<itemizedlist>
<listitem><para><code>$greater</code> expresses that the literal value of the subject node of the condition must be greater than the literal value of the object node of the condition.</para></listitem>
<listitem><para><code>$greater</code> evaluates to true, if</para></listitem>
<listitem><para>both the subject node and object node of the condition identify an XDI literal, AND</para></listitem>
<listitem><para>both literal values are numerical, AND</para></listitem>
<listitem><para>the numerical literal value of the subject node is greater than the numerical literal value of the object node.</para></listitem>
</itemizedlist>

</section>

<section><title><code>$lesser</code> Condition</title>

<itemizedlist>
<listitem><para><code>$lesser</code> expresses that the literal value of the subject node of the condition must be lesser than the literal value of the object node of the condition.</para></listitem>
<listitem><para><code>$lesser</code> evaluates to true, if</para></listitem>
<listitem><para>both the subject node and object node of the condition identify an XDI literal, AND</para></listitem>
<listitem><para>both literal values are numerical, AND</para></listitem>
<listitem><para>the numerical literal value of the subject node is lesser than the numerical literal value of the object node.</para></listitem>
</itemizedlist>

</section>

<section><title>Statement Condition</title>

<itemizedlist>
<listitem><para>If a condition is used that does not correspond to any of comparison conditions (<code>$is</code>, <code>$equals</code>, <code>$greater</code>, <code>$lesser</code>), it is considered to be an arbitrary XDI statement.</para></listitem>
<listitem><para>The XDI statement evaluates to true, if</para></listitem>
<listitem><para>it exists in the target graph.</para></listitem>
</itemizedlist>

</section>

</section>

<section><title>Usage Permissions Policy Expression Dictionary Requirements</title>

<para>The following reserved words are proposed for usage policy expression, also called usage permissions.</para>
<para>See the example section for the use of the $for branch within a detailed link contract instantiation scenario.</para>

<section><title><code>$for</code></title>

<para>Included within a link contract instance to specify the context of usage. Uses the $opt, $required, $default and other reserved words.  The $for pattern makes use of $opt and other patterns.</para>

</section>

<section><title><code>$opt</code></title>

<para>Included within a $for subgraph support the opt-in process associated with a link contract giving a requesting authority access to data.</para>

</section>

<section><title><code>$required</code></title>

<para>Provides a mechanism within $opt for the requesting authority to declared whether a requested data item is optional or required. Note that a request for a link contract granting access to data may contain multiple elements, some optional and some required for the operation to succeed.</para>

</section>

<section><title><code>$default</code></title>

<para>Specifies whether the usage permission is $true or $false by default (e.g. opt-in or opt-out).</para>

</section>

</section>

</section>

<section id="s.link.contract.instantiation"><title>Link Contract Instantiation</title>

<para><firstterm>Link contract instantiation</firstterm> is a function which instantiates a new link
contract from a link contract template. This function may be invoked in the following ways:</para>

<itemizedlist>
<listitem>When the <code>$connect</code> operation is executed (see <xref linkend="xdi-messaging-1.0"/>).</listitem>
<listitem>When a request operation is deferred (see <xref linkend="xdi-messaging-1.0"/>).</listitem>
<listitem>Through other mechanisms that are out of scope of this specification.</listitem>
</itemizedlist>

<para>The function's input parameters are:</para>

<itemizedlist>
<listitem>A <glossterm>link contract template</glossterm> identified by a <code>{$do}</code> context.</listitem>
<listitem>A <glossterm>variable assignment</glossterm> for the variable <code>{$from}</code>.
This is used as the <glossterm>requesting authority</glossterm> of the instantiated link contract.</listitem>
<listitem>A <glossterm>variable assignment</glossterm> for the variable <code>{$to}</code>.
This is used as the <glossterm>authorizing authority</glossterm> of the instantiated link contract.</listitem>
<listitem>A list of additional <glossterm>variable assignments</glossterm> that may
be required by the link contract template.</listitem>
<listitem>An <glossterm>instance flag</glossterm> that states whether the link contract is
instantiated as a <code>$do</code> entity singleton or as an instance in a <code>[$do]</code> entity collection.</listitem>
</itemizedlist>

<para>The function's output is an instantiated link contract.</para>

<para>The function operates as follows:
TODO: formal description of the link contract instantiation function</para>

<para>Example: Given the following input parameters:</para>

<itemizedlist>
<listitem>The link contract template is <code>$get{$do}</code> (see <xref linkend="s.standard.get.link.contract.template"/>).</listitem>
<listitem>The variable <code>{$from}</code> is assigned the value <code>=!:uuid:1111</code>.</listitem>
<listitem>The variable <code>{$to}</code> is assigned the value <code>=!:uuid:2222</code>.</listitem>
<listitem>The variable <code>{$get}</code> is assigned the value <code>=!:uuid:2222&lt;#email></code>.</listitem>
<listitem>The instance flag is set to "entity singleton".</listitem>
</itemizedlist>

<para>Then the instantiated link contract is as follows:</para>

<programlisting>(=!:uuid:2222/=!:uuid:1111)$get$do/$get/=!:uuid:2222&lt;#email>
(=!:uuid:2222/=!:uuid:1111)($get$do$if$and/$true){$from}/$is/=!:uuid:1111
(=!:uuid:2222/=!:uuid:1111)($get$do$if$and/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

</section>

<section id="s.push.contracts"><title>Push Link Contracts</title>

<section id="s.push.contracts.structure"><title>Structure of a Push Link Contract</title>

<para>A push contract is a link contract that expresses a publish/subscribe relationships between 
peers. It enables a peer called  <firstterm>publishing peer</firstterm> (or short <firstterm>publisher</firstterm>)
to notify one or more other peers called <firstterm>subscribing peers</firstterm> (or short <firstterm>subscribers</firstterm>)
of changes in a graph for which the publisher is authoritative.</para>

<para>A publish/subscribe relationship between a publishing authority and a subscribing authority is modeled as
a link contract with certain properties. This link contract is called a <firstterm>push link contract</firstterm>
(or short <firstterm>push contract</firstterm>).</para>

<para>A push contract conforms to the link contract pattern (see <xref linkend='xdi-link-contracts-1.0'/>)
and in addition MUST meet the following conditions:</para>

<orderedlist>
<listitem><para>The link contract's <firstterm>authorizing authority</firstterm> is the publisher.</para></listitem>
<listitem><para>The link contract's <firstterm>requesting authority</firstterm> is the subscriber.</para></listitem>
<listitem><para>The link contract contains one or more <code>$push</code> permissions.</para></listitem>
<listitem><para>The link contract MAY contain permissions other than <code>$push</code>.</para></listitem>
<listitem><para>The link contract MAY contain one or more <firstterm>push target endpoint URIs</firstterm>.</para></listitem>
<listitem><para>The link contract MAY contain the <firstterm>content flag</firstterm> which specifies whether a subscriber
wishes to use light pushes or content pushes.</para></listitem>
</orderedlist>

<para>Following is the basic structure of a push contract. Labels in <code>&lt;--this-form--&gt;</code> represent
template variables.</para>

<programlisting>(&lt;--publisher--&gt;/&lt;--subscriber--&gt;)$do/$push/&lt;--target-address--&gt;
(&lt;--publisher--&gt;/&lt;--subscriber--&gt;)$do/$is()/&lt;--subscriber-->
(&lt;--publisher--&gt;/&lt;--subscriber--&gt;)($do/$push)&lt;$xdi&gt;&lt;$uri&gt;/&amp;/"&lt;--subscriber endpoint--&gt;"
(&lt;--publisher--&gt;/&lt;--subscriber--&gt;)($do/$push)&lt;$content&gt;/&amp;/&lt;--light-or-content-push--&gt;
</programlisting>

<para>If the push contract does not contain at least one push target endpoint URI, the subscriber's XDI endpoint MUST
be discovered using the XDI Discovery <xref linkend='xdi-discovery-1.0'/> protocol. This XDI endpoint MUST then
be used as the single push target endpoint URI of the push contract.</para>

<para>If the content flag is absent, the default value <code>false</code> (i.e. use light pushes) MUST be assumed.</para>

<para>Like all link contracts, push contracts are unidirectional and only apply to data in the authorizing
authority's graph. In order to set up a bi- or multidirectional publish/subscribe relationship, two or more
push contracts can be created in which multiple peers simultaneously fulfill the publisher and subscriber roles.</para>

</section>

<section id="s.push.contracts.trigger"><title>Triggering a Push Link Contract</title>

<para>A push contract is triggered when the following conditions are met:</para>

<orderedlist>
<listitem><para>An operation is executed against a graph that contains one or more push contracts.</para></listitem>
<listitem><para>The operation is not a <code>$get</code> operation.</para></listitem>
<listitem><para>The target of the operation is a sub-context of any context that is the target of a <code>$push</code> permission of at least one of the push contracts in the graph.</para></listitem>
</orderedlist>

<para>When a push contract is triggered, it initiates one or more XDI messaging round-trips to notify
subscribers. The notification is itself an XDI message. This message is called a <firstterm>push message</firstterm>
(or short <firstterm>push</firstterm>).</para>

<para>A <firstterm>push message</firstterm> MUST conform to the request message pattern
(see <xref linkend="xdi-messaging-1.0"/>) and in addition MUST meet the following conditions:</para>

<orderedlist>
<listitem><para>The push message uses the <code>$push</code> request operation (see <xref linkend="s.operation.push"/>).</para></listitem>
</orderedlist>

<para>TODO: describe better how a push message is generated and sent</para>
<para>TODO: describe better how the $push operation is used</para>
<para>TODO: describe how a push contract's policy must be evaluated by both sender and receiver</para>
<para>TODO: describe who in the $push message is the requester and who is responder</para>

</section>

</section>

<section><title>Policy Expression Examples</title>

<para>These examples are written in XDI Display Format. See JSON Serialization Rules for the over-the-wire format.</para>
<para>Link contract policy that checks that the secret token in the message matches the secret token in the graph:</para>

<programlisting>$secret&lt;$token>&amp;/&amp;/"s3cr3t"
$do$if/$true/({$msg}$secret&lt;$token>/$equals/$secret&lt;$token>)
</programlisting>

<para>Link contract policy that checks that the message timestamp comes before a certain time:</para>

<programlisting>$do$if/$true/({$msg}&lt;$t>/$lesser/...$do#expiration&lt;$t>)
$do#expiration&lt;$t>&amp;/&amp;/"2012-12-12"
</programlisting>

<para>Link contract policy that checks that the message comes from one of the approved senders:</para>

<programlisting>($do$if/$true){$from}/$is/[=]!2222
($do$if/$true){$from}/$is/[=]!3333
($do$if/$true){$from}/$is/[=]!4444
</programlisting>

<para>Link contract policy that excludes a certain sender:</para>

<programlisting>($do$if/$false){$from}/$is/[=]!1111
</programlisting>

<para>Link contract policy that excludes a certain sender (other way of doing it):</para>

<programlisting>($do$if$not/$true){$from}/$is/[=]!1111
</programlisting>

<para>Link contract for "root access" to an authority's own graph:</para>

<programlisting>(&lt;--AA-->/&lt;--AA-->)$do/$all/
(&lt;--AA-->/&lt;--AA-->)($do$if$and/$true){$from}/$is/&lt;--AA-->
(&lt;--AA-->/&lt;--AA-->)($do$if$and$or/$true){$msg}&lt;$secret>&lt;$token>&lt;$valid>&amp;/&amp;/true
(&lt;--AA-->/&lt;--AA-->)($do$if$and$or/$true){$msg}&lt;$sig>&lt;$valid>&amp;/&amp;/true
</programlisting>

<para>Link contract for the "public branch" of an XDI graph:</para>

<programlisting>$public$do/$get/$public
</programlisting>

<para>Link contract to allow Bob access to Alice's phone number:</para>

<programlisting>=alice/$ref/[=]!1111
=bob/$ref/[=]!2222
[=]!1111$&lt;#tel>&amp;/&amp;/"#1-123-567-8900"
($do$if/$true){$from}/$is/[=]!2222)
$do/$get/[=]!1111&lt;#tel>
</programlisting>

<para>Link contract policy that checks that the message comes either from myself <code>([=]!1111)</code>
or from one of my friends:</para>

<programlisting>($do$if$or/$true)[=]!1111/$is/{$from}
($do$if$or/$true)[=]!1111/#friend/{$from}
</programlisting>

<para>Link contract that allows a $do$signal operation only on certain statements (with variables):</para>

<programlisting>$do/$do$signal/[=]!1111[#channel]!23[#event]
($do$if$and/$do$signal)[=]!1111[#channel]!23[#event]{1}/#domain/#cloudos)
($do$if$and$or/$do$signal)[=]!1111[#channel]!23[#event]{1}/#type/#notification
($do$if$and$or/$do$signal)[=]!1111[#channel]!23[#event]{1}/#type/#subscription
($do$if$and$or/$do$signal)[=]!1111[#channel]!23[#event]{1}/#type/#deletion
</programlisting>

<para>Combination of the previous two examples:</para>

<programlisting>
[=]!1111/#friend/[=]!2222
$do/$do$signal/[=]!1111[#channel]!23[#event]
($do$if$and[$or]!2/$true)[=]!1111/$is/{$from}
($do$if$and[$or]!2/$true)[=]!1111/#friend/{$from}
($do$if$and/$do$signal)[=]!1111[#channel]!23[#event]{1}/#domain/#cloudos
($do$if$and[$or]!1/$do$signal)[=]!1111[#channel]!23[#event]{1}/#type/#notification
($do$if$and[$or]!1/$do$signal)[=]!1111[#channel]!23[#event]{1}/#type/#subscription
($do$if$and[$or]!1/$do$signal)[=]!1111[#channel]!23[#event]{1}/#type/#deletion
</programlisting>

<para>Link contract policy that allows the message if it is not sent on Friday 13th, and
it is not sent by =drummond or =markus. (Note that the weekday and day-of-month
definitions still need to be defined in the XDI <code>$</code> Dictionary.)</para>

<programlisting>($do$if$and[$not]!1$and/$true)[weekday_is_friday]
($do$if$and[$not]!1$and/$true)[day_is_13th]
($do$if$and[$not]!2$or/$true)(=drummond/$is/{$from}
($do$if$and[$not]!2$or/$true)=markus/$is/{$from}
</programlisting>

<para>Complex example, expressing this pseudocode</para>

<programlisting>if a cardholder has a GOLD account THEN
    (if cardholder exceeded credit limit AND
    if bank is running out of money) THEN
       FALSE
    ELSE
       TRUE
 ELSE
   if cardholder exceeded credit limit THEN
      FALSE
   ELSE
      TRUE
</programlisting>

<para>in XDI, as</para>

<programlisting>(=aa/=ra)($do$if$or[$and]!1/$true)=ra&lt;#gold>&amp;/&amp;/true
(=aa/=ra)($do$if$or[$and]!1$not$and/$true)=ra&lt;#ex>&amp;/&amp;/true
(=aa/=ra)($do$if$or[$and]!1$not$and/$true)+bank&lt;#nomoney>&amp;/&amp;/false
(=aa/=ra)($do$if$or/$true)=ra&lt;#ex>&amp;/&amp;/false
</programlisting>

</section>

<section><title>Link Contract Examples</title>

<para>These examples are written in XDI Display Format, with line breaks added after each
predicate for readability and to add comments. See JSON Serialization Rules for the over-the-wire format.</para>

<section><title>Requester Link Contract Pattern</title>

<para>A requester link contract is used by an RA to authorize acceptance of link contract
instances in its graph from an AA based on a link contract template. IMPORTANT: the XDI
address of the requester link contract is algorithmically composed by placing the XDI address
of the link contract within an inner root of the requesting authority followed by the template
authority context. This enables XDI clients to reference the requester link contract for
authorization in an XDI <code>$set{$do}</code> message for a new link contract instance (see XDI messaging).</para>

<para>All requester link contracts except a root requester link contract (see below) MUST
consist of a set of XDI statements in one of the two following patterns:</para>

<section><title>Requester Link Contract Singleton Pattern</title>

<programlisting>(&lt;--RA-->/&lt;--TA-->&lt;--ID-->{$do})$do/$set{$do}/({$to}/&lt;--RA-->)&lt;--TA-->&lt;--ID-->$do
</programlisting>

</section>

<section><title>Requester link contract pattern with policy expression</title>

<programlisting>(&lt;--RA-->/&lt;--TA-->&lt;--ID-->{$do})$do$if/&lt;--policy-expression-->
(&lt;--RA-->/&lt;--TA-->&lt;--ID-->{$do})$do/$set{$do}/({$to}/&lt;--RA-->)&lt;--TA-->&lt;--ID-->$do</programlisting>

<section><title><code>$set{$do}</code> Operation</title>

<para>A requester link contract uses the <code>$set{$do}</code> operation that is used to
authorize new link contract instances. The object of this predicate MUST be the XDI address
of the link contract template for which it will authorize instances.</para>

</section>

<section><title>Requester Link Contract Policies</title>

<para>The XDI policy expression statements in a requester link contract expresses the
requesting authority's policy for accepting writes of the instances of a specific link
contract template into its own graph. For example, these policy statements might require
the authorizing authority to:</para>

<itemizedlist>
<listitem><para>Be an employee of a company.</para></listitem>
<listitem><para>Be under or over a certain age.</para></listitem>
<listitem><para>Have a certain reputation or trust level.</para></listitem>
</itemizedlist>

</section>

</section>

</section>


<section><title>Public Link Contract for XDI Discovery</title>

<para>In this XDI graph, the public link contract provides access to the endpoint URIs in the
XDI graph for the authority <code>[=]!:uuid:2</code> to support XDI Discovery.</para>

<programlisting>/$is$ref/([=]!:uuid:2)                                    &lt;== inverse statement of peer root address for the XDI authority
([=]!:uuid:2)/$ref/                                       &lt;== direct statement of peer root address for the XDI authority
[&lt;$uri>]&lt;!1>&amp;/&amp;/"https://xdi.example.com/1224/"           &lt;== endpoint URI 1
[&lt;$uri>]&lt;!2>&amp;/&amp;/"https://xdi2.example.com/1224/"          &lt;== endpoint URI 2
&lt;$uri>/$ref/[&lt;$uri>]&lt;!1>                                  &lt;== reference to URI 1 as default endpoint URI
[=]!:uuid:2$to$anon$from$public$do/$get/&lt;$uri>            &lt;== public link contract to get reference to default endpoint URI
[=]!:uuid:2$to$anon$from$public$do/$get/[&lt;$uri>]          &lt;== public link contract to get collection of all endpoint URIs
</programlisting>

</section>

<section><title>Alice-to-Acme Link Contract Pattern</title>

<para>This set of XDI graphs shows how Acme Corp can publish a link contract template
requesting a name and email address, and Alice can authorize an instance of that link
contract template. For readability, UUIDs referring to Alice as "AA", ACME as "TA" and
the template authority as "TA" are shortened. Also, the ## character string combined
with the red color are used to denote comments amidst XDI statements</para>

<para>NOTE: TO AVOID CONFUSION, MAKE SURE YOUR BROWSER WINDOW IS WIDE ENOUGH SO LINES DO NOT WRAP.</para>

<section><title>Acme's Starting Graph</title>

<para>This is the portion of Acme's graph publishing Acme's own link contract template
and requester link contract before Alice has authorized an instance of this template.</para>

<programlisting>## use of name/number pattern to select instance of template
[+]!:uuid:TA#registration{$do}/$ref/[+]!:uuid:TA[{$do}(]!:uuid:1122}

## Template Attributes
[+]!:uuid:TA[{$do}]!:uuid:1122&lt;#en>&lt;$lang>{&lt;$label>}&amp;/&amp;/"CC Registration Template"
[+]!:uuid:TA[{$do}]!:uuid:1122&lt;$template>&lt;$add>&lt;$t>&amp;/&amp;/"1987-12-12"

## operational permissions
([+]!:uuid:TA[{$do}]!:uuid:1122/$get){$to}{&lt;#email>}&lt;$required>&amp;/&amp;/false
([+]!:uuid:TA[{$do}]!:uuid:1122/$get){$to}{&lt;#phone>}&lt;$required>&amp;/&amp;/true

## usage permissions
[+]!:uuid:TA[{$do}]!:uuid:1122$for{&lt;$opt>}&lt;$required>&amp;/&amp;/true
[+]!:uuid:TA[{$do}]!:uuid:1122$for{&lt;$opt>}&lt;$default>&amp;/&amp;/false
[+]!:uuid:TA[{$do}]!:uuid:1122$for{&lt;$opt>}&lt;#en>&lt;$lang>&lt;$label>&amp;/&amp;/"To let you know about our special offers"

## policy expressions
([+]!:uuid:TA[{$do}]!:uuid:1122$if/$true){{$from}}/$is/{$from}
</programlisting>

</section>

<section><title>Alice's Starting Graph</title>

<para>This is Alice's graph before Alice authorizes an instance of Acme's registration
link contract template.</para>

<programlisting>[=]!:uuid:AA&lt;#name>&amp;/&amp;/"Alice Doe"
[=]!:uuid:AA&lt;#phone>/$ref/[=]!:uuid:AA[&lt;#phone>]&lt;!:uuid:2222>
[=]!:uuid:AA&lt;#home>&lt;#phone>/$ref/[=]!:uuid:AA[&lt;#phone>]&lt;!:uuid:12222>
[=]!:uuid:AA&lt;#mobile>&lt;#phone>/$ref/[=]!:uuid:AA[&lt;#phone>]&lt;!:uuid:2222>
[=]!:uuid:AA[&lt;#phone>]&lt;!:uuid:12222>&amp;/&amp;/"677-854-AA"
[=]!:uuid:AA[&lt;#phone>]&lt;!:uuid:2222>&amp;/&amp;/"677-654-4444"
[=]!:uuid:AA&lt;#email>/$ref/[=]!:uuid:AA[&lt;#email>]&lt;!:uuid:13333>
[=]!:uuid:AA&lt;#home>&lt;#email>/$ref/[=]!:uuid:AA[&lt;#email>]&lt;!:uuid:13333>
[=]!:uuid:AA&lt;#work>&lt;#email>/$ref/[=]!:uuid:AA[&lt;#email>]&lt;!:uuid:23333>
[=]!:uuid:AA[&lt;#email>]&lt;!:uuid:13333>&amp;/&amp;/"ali@gmail.com "
[=]!:uuid:AA[&lt;#email>]&lt;!:uuid:23333>&amp;/&amp;/"adoe@coco.com"
</programlisting>

</section>

<section><title>Link Contract Instance to be Added to Both Graphs After Authorization</title>

<para>Following are the new statements added to both Alice's and Acme's graphs after Alice
authorizes an instance of Acme's registration link contract template.</para>

<programlisting>## Link contract instance, written by rule
([=]!:uuid:AA/[=]!:uuid:RA)[+]!:uuid:TA[$do]!:uuid:1122&lt;$add>&lt;$t>&amp;/&amp;/"1965-12-02"

## from Template Attributes
([=]!:uuid:AA/[=]!:uuid:RA)[+]!:uuid:TA[$do]!:uuid:1122&lt;#en>&lt;$lang>&lt;$label>&amp;/&amp;/"CC Registration Template"	
([=]!:uuid:AA/[=]!:uuid:RA)[+]!:uuid:TA[$do]!:uuid:1122&lt;$template>&lt;$add>&lt;$t>&amp;/&amp;/"1987-12-12"

## operational permissions - including optional email attribute (Alice chose work attributes)
([=]!:uuid:AA/[=]!:uuid:RA)[+]!:uuid:TA[$do]!:uuid:1122/$get/[=]!:uuid:AA&lt;#work>&lt;#email>
([=]!:uuid:AA/[=]!:uuid:RA)[+]!:uuid:TA[$do]!:uuid:1122/$get/[=]!:uuid:AA&lt;#mobile>&lt;#phone>

## usage permissions 
([=]!:uuid:AA/[=]!:uuid:RA)[+]!:uuid:TA[$do]!:uuid:1122$for&lt;$opt>&amp;/&amp;/true

## policy expressions 
([=]!:uuid:AA/[=]!:uuid:RA)([+]!:uuid:TA[$do]!:uuid:1122$if/$true){$from}/$is/[=]!:uuid:RA
</programlisting>

<para>Note that exactly the same statements are added to both Alice's and Acme's graphs. They
are globally unique in both graphs because:</para>

<itemizedlist>
<listitem><para>The authorizing authority context is Alice's XDI address.</para></listitem>
<listitem><para>The requesting authority context is Acme's XDI address.</para></listitem>
<listitem><para>The link contract template ID is an entity singleton assigned by Acme under its own XDI address.</para></listitem>
</itemizedlist>

</section>

</section>

</section>

<appendix id="a.standard.link.contract.templates" role="normative"><title>Standard Link Contract Templates</title>

<para>The link contract templates defined in this section MUST be recognized by XDI processors
to be part of the common graph. They can be used for <glossterm>link contract instantiation</glossterm>
(see <xref linkend="s.link.contract.instantiation"/>).</para>

<section id="s.standard.root.link.contract.template"><title>Standard Root Link Contract Template</title>

<para>The purpose of the <firstterm>standard root link contract template</firstterm> is to
instantiate link contracts with a <code>$all</code> permission on an entire graph ("root access").</para>

<para>Its policy authorizes messages only from a single specific requester and requires either a valid signature
or a valid secret token.</para>

<para>The standard root link contract template is typically instantiated as a <code>$do</code> entity singleton, since
for any given relationship between two peers, having one <firstterm>root link contract</firstterm> is sufficient.</para>

<para>The <firstterm>standard root link contract template</firstterm>:</para>

<programlisting>$all{$do}/$all/
($all{$do}$if$and/$true){{$from}}/$is/{$from}
($all{$do}$if$and$or/$true){{$msg}}&lt;$secret>&lt;$token>&lt;$valid>/&amp;/true
($all{$do}$if$and$or/$true){{$msg}}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

<para>Example instantiated <firstterm>root link contract</firstterm>:</para>

<programlisting>(=!:uuid:2222/=!:uuid:1111)$all$do/$all/
(=!:uuid:2222/=!:uuid:1111)($all$do$if$and/$true){$from}/$is/=!:uuid:1111
(=!:uuid:2222/=!:uuid:1111)($all$do$if$and/$true){$msg}&lt;$secret>&lt;$token>&lt;$valid>/&amp;/true
(=!:uuid:2222/=!:uuid:1111)($all$do$if$and/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

</section>

<section id="s.standard.get.link.contract.template"><title>Standard Get Link Contract Template</title>

<para>The purpose of the <firstterm>standard get link contract template</firstterm> is to
instantiate link contracts with a <code>$get</code> permission on a certain subgraph identified by the
<code>{$get}</code> variable.</para>

<para>Its policy authorizes messages only from a single specific requester and requires a valid signature.</para>

<para>The <firstterm>standard get link contract template</firstterm> is typically instantiated as an instance in a <code>[$do]</code>
entity collection, since
for any given relationship between two peers, multiple <firstterm>get link contracts</firstterm> may exist.</para>

<para>The <firstterm>standard get link contract template</firstterm>:</para>

<programlisting>$get{$do}/$get/{$get}
($get{$do}$if$and/$true){{$from}}/$is/{$from}
($get{$do}$if$and/$true){{$msg}}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

<para>Example instantiated <firstterm>get link contract</firstterm>:</para>

<programlisting>(=!:uuid:2222/=!:uuid:1111)$get[$do]*!:uuid:d-2/$get/=!:uuid:2222&lt;#email>
(=!:uuid:2222/=!:uuid:1111)($get[$do]*!:uuid:d-2$if$and/$true){$from}/$is/=!:uuid:1111
(=!:uuid:2222/=!:uuid:1111)($get[$do]*!:uuid:d-2$if$and/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

</section>

<section id="s.standard.push.link.contract.template"><title>Standard Push Link Contract Template</title>

<para>The purpose of the <firstterm>standard push link contract template</firstterm> is to
instantiate push link contracts with a <code>$push</code> permission on a certain subgraph identified by
the <code>{$push}</code> variable.</para>

<para>Its policy authorizes messages only from a single specific requester and requires a valid signature.</para>

<para>The <firstterm>standard push link contract template</firstterm> is typically instantiated as an instance in a <code>[$do]</code>
entity collection, since
for any given relationship between two peers, multiple <firstterm>push link contracts</firstterm> may exist.</para>

<para>The <firstterm>standard push link contract template</firstterm>:</para>

<programlisting>$push{$do}/$push/{$push}
$push{$do}/$is()/{($from)}
($push{$do}$if$and/$true){{$from}}/$is/{$to}
($push{$do}$if$and/$true){{$msg}}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

<para>Example instantiated <firstterm>push link contract</firstterm>:</para>

<programlisting>(=!:uuid:2222/=!:uuid:1111)$push[$do]*!:uuid:d-2/$push/=!:uuid:2222&lt;#email>
(=!:uuid:2222/=!:uuid:1111)$push[$do]*!:uuid:d-2/$is()/(=!:uuid:1111)
(=!:uuid:2222/=!:uuid:1111)($push[$do]*!:uuid:d-2$if$and/$true){$from}/$is/=!:uuid:2222
(=!:uuid:2222/=!:uuid:1111)($push[$do]*!:uuid:d-2$if$and/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

</section>

<section id="s.standard.deferred.push.link.contract.template"><title>Standard Deferred Push Link Contract Template</title>

<para>The purpose of the <firstterm>standard deferred push link contract template</firstterm> is to
instantiate deferred push link contracts with a <code>$push</code> permission on a certain subgraph identified by
the <code>{$push}</code> variable.</para>

<para>Its policy authorizes messages only from a single specific requester and requires a valid signature.</para>

<para>The <firstterm>standard push link contract template</firstterm> is instantiated automatically every time a
request operation is <glossterm>deferred</glossterm> (see <xref linkend="s.response.message.deferred.push.contracts"/>).</para>

<para>The <firstterm>standard deferred push link contract template</firstterm> is typically instantiated as an instance in a <code>[$do]</code>
entity collection, since
for any given relationship between two peers, multiple <firstterm>push link contracts</firstterm> may exist.</para>

<para>The <firstterm>standard deferred push link contract template</firstterm>:</para>

<programlisting>$defer$push{$do}/$push/{$push}
$defer$push{$do}/$is()/{($from)}
($defer$push{$do}$if$and/$true){{$from}}/$is/{$to}
($defer$push{$do}$if$and/$true){{$msg}}&lt;$sig>&lt;$valid>/&amp;/true
($defer$push{$do}$if$and/$true){{$msg}}/$is$msg/{$msg}
</programlisting> 

<para>Example instantiated <firstterm>deferred push link contract</firstterm>:</para>

<programlisting>(=!:uuid:2222/=!:uuid:1111)$defer$push[$do]*!:uuid:d-2/$push/=!:uuid:2222&lt;#email>
(=!:uuid:2222/=!:uuid:1111)$defer$push[$do]*!:uuid:d-2/$is()/(=!:uuid:1111)
(=!:uuid:2222/=!:uuid:1111)($defer$push[$do]*!:uuid:d-2$if$and/$true){$from}/$is/=!:uuid:2222
(=!:uuid:2222/=!:uuid:1111)($defer$push[$do]*!:uuid:d-2$if$and/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
(=!:uuid:2222/=!:uuid:1111)($defer$push[$do]*!:uuid:d-2$if$and/$true){$msg}/$is$msg/=!:uuid:1111[$msg]*!:uuid:m-1
</programlisting>

</section>

<section id="s.standard.digest.link.contract.template"><title>Standard Message Digest Link Contract Template</title>

<para>The purpose of the <firstterm>standard message digest link contract template</firstterm> is to
instantiate digest link contracts that only authorize a single specific message. This is achieved
through a policy that requires a certain digest value calculated from the serialized message.</para>

<para>The <firstterm>standard message digest link contract template</firstterm> is typically instantiated as an instance
in a <code>[$do]</code> entity collection, since
for any given relationship between two peers, multiple <firstterm>message digest link contracts</firstterm> may exist.</para>

<para>The <firstterm>standard digest link contract template</firstterm>:</para>

<programlisting>$msg$digest{$do}/$all/
($msg$digest{$do}$if/$true){{$msg}}&lt;$digest>/{&amp;}/{&lt;$digest>}</programlisting>

</section>

</appendix>

<appendix id="a.common.link.contract.patterns" role="non-normative"><title>Common Link Contract Patterns</title>

<para>This section describes a number of non-normative link contract patterns that build on this specification.
These patterns are designed for various common data sharing and communication use cases.</para>

<section id="s.root.link.contract"><title>Root Link Contract</title>

<para>A root link contract is a link contract with a <code>$all</code> permission on an entire graph ("root access").</para>

<para>A root link contract is typically set up for the following reasons:</para>

<orderedlist>
<listitem><para>By a peer for itself, in order to give an XDI actor root access to its own graph for
which it is authoritative.</para></listitem>
<listitem><para>Between peers if they have a highly trusted relationship similar
to the legal concepts of custodianship or guardianship (e.g. parent-child).</para></listitem>
<listitem><para>Between XDI agents and XDI endpoints, if they are controlled by the same XDI actor.</para></listitem>
</orderedlist>

<para>A root link contract is an instance of the standard root link contract template
(see <xref linkend="s.standard.root.link.contract.template"/>).</para>

<para>A root link contract is based on the generic link contract instance pattern, with the following properties:</para>

<itemizedlist>
<listitem><para>The requesting authority is set to the XDI authority.</para></listitem>
<listitem><para>The authorizing authority is set to the XDI authority.</para></listitem>
<listitem><para>The template ID is empty.</para></listitem>
<listitem><para>The root link contract MUST use the singleton pattern, i.e. there MUST only be one per XDI authority.</para></listitem>
<listitem><para>The root link contract MUST grant <code>$all</code> permission to the common root node of an XDI graph.</para></listitem>
<listitem><para>The root link contract SHOULD contain a policy that restricts the sender of an XDI message to the XDI authority's subgraph.</para></listitem>
<listitem><para>Authentication SHOULD be required for access to a root link contract. However the XDI authority is the ultimate authority for the policies pertaining to any link contract.</para></listitem>
</itemizedlist>

<para>Root link contract pattern:</para>

<programlisting>(&lt;--AA-->/&lt;--AA-->)($do$if&lt;--policy-expression-->
(&lt;--AA-->/&lt;--AA-->)$do/$all/
</programlisting>

<para>A <firstterm>root link contract</firstterm> contains a <code>$all</code> permission on 
an entire graph ("root access").</para>

<para>Example root link contract:</para>

<programlisting>(=!:uuid:1111/=!:uuid:1111)$do/$all/
(=!:uuid:1111/=!:uuid:1111)($do$if$and/$true){$from}/$is/=!:uuid:1111
(=!:uuid:1111/=!:uuid:1111)($do$if$and$or/$true){$msg}&lt;$secret>&lt;$token>&lt;$valid>/&amp;/true
(=!:uuid:1111/=!:uuid:1111)($do$if$and$or/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
</programlisting>

</section>

<section id="s.public.link.contract"><title>Public Link Contract</title>

<para>A <firstterm>public link contract</firstterm> contains <code>$get</code> permissions on 
certain limited subgraphs that are intended to be publicly available.</para>

<itemizedlist>
<listitem><para>The public link contract is based on the generic link contract instance pattern, with the following constraints:</para></listitem>
<listitem><para>The requesting authority is set to <code>$anon</code>.</para></listitem>
<listitem><para>The authorizing authority is set to the XDI authority.</para></listitem>
<listitem><para>The template ID is set to <code>$public</code>.</para></listitem>
<listitem><para>The public link contract MUST use the singleton pattern, i.e. there MUST only be one per XDI authority.</para></listitem>
<listitem><para>The public link contract SHOULD grant <code>$get</code> permission to the <code>$public</code> subgraph of the XDI authority's subgraph.</para></listitem>
<listitem><para>In addition, the public link contract MAY grant permissions to other parts of the XDI authority's subgraph.</para></listitem>
<listitem><para>The public link contract SHOULD NOT contain a policy.</para></listitem>
<listitem><para>Authentication SHOULD NOT be required for access to a public link contract. However the XDI authority is the ultimate authority for the policies pertaining to any link contract.</para></listitem>
</itemizedlist>

<para>Public Link Contract Pattern:</para>

<programlisting>(&lt;--AA-->/$public)$do/$get/&lt;--AA-->&lt;--object-graph-->
</programlisting>

<para>Note that authorities can further customize the public link contract, e.g. to prevent spam.</para>

<para>A public link contract does not contain a policy, i.e. it always evaluates to <emphasis>true</emphasis>.</para>

<para>Example public link contract:</para>

<programlisting>(=!:uuid:1111/$public)($do/$get)=!:uuid:1111/$is$ref/{}
(=!:uuid:1111/$public)($do/$get)/$is$ref/{}
(=!:uuid:1111/$public)$do/$get/=!:uuid:1111$public
(=!:uuid:1111/$public)$do/$get/=!:uuid:1111$msg$sig$keypair&lt;$public>&lt;$key>
(=!:uuid:1111/$public)$do/$get/=!:uuid:1111$msg$encrypt$keypair&lt;$public>&lt;$key>
(=!:uuid:1111/$public)($do/$get)=!:uuid:1111$msg$sig$keypair/$is#/{}
(=!:uuid:1111/$public)($do/$get)=!:uuid:1111$msg$encrypt$keypair/$is#/{}
</programlisting>

</section>

<section id="s.connect.link.contract"><title>Connect Link Contract</title>

<para>A <firstterm>connect link contract</firstterm> contains a <code>$connect</code> permission on
an entire graph (see <xref linkend="s.operation.connect"/>).</para>

<para>A connect link contract contains policies that will defer all request operations.</para>

<para>Example connect link contract:</para>

<programlisting>(=!:uuid:1111/$connect)$do/$connect/
(=!:uuid:1111/$connect)($do$defer$push$if$and/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
(=!:uuid:1111/$connect)$do$if//$not
</programlisting>

</section>

<section id="s.send.link.contract"><title>Send Link Contract</title>

<para>A <firstterm>send link contract</firstterm> contains a <code>$send</code> permission on
an entire graph (see <xref linkend="s.operation.send"/>).</para>

<para>A send link contract contains policies that will defer all request operations.</para>

<para>Example send link contract:</para>

<programlisting>(=!:uuid:1111/$send)$do/$send/
(=!:uuid:1111/$send)($do$defer$push$if$and/$true){$msg}&lt;$sig>&lt;$valid>/&amp;/true
(=!:uuid:1111/$send)$do$if//$not
</programlisting>

</section>

</appendix>

</article>
